/* libspire_html.h generated by valac 0.12.0, the Vala compiler, do not modify */


#ifndef ____IMPRESORA_DOC_LION_DOC_LION_OPERADORES_EDWINDLC_PROGRAMACION_PROYECTOSSOFTWARE_SOFTWARE_VALA_PROYECTOSVALA_PROYECTS_LIBSPIRE_HTML_BIN_WIN_LIBSPIRE_HTML_H__
#define ____IMPRESORA_DOC_LION_DOC_LION_OPERADORES_EDWINDLC_PROGRAMACION_PROYECTOSSOFTWARE_SOFTWARE_VALA_PROYECTOSVALA_PROYECTS_LIBSPIRE_HTML_BIN_WIN_LIBSPIRE_HTML_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>
#include <gee.h>

G_BEGIN_DECLS


#define EDWINSPIRE_HTML_TYPE_ATTR_DIR (edwinspire_html_attr_dir_get_type ())

#define EDWINSPIRE_HTML_TYPE_ELEMENT (edwinspire_html_element_get_type ())
#define EDWINSPIRE_HTML_ELEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_ELEMENT, edwinspireHtmlElement))
#define EDWINSPIRE_HTML_ELEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_ELEMENT, edwinspireHtmlElementClass))
#define EDWINSPIRE_HTML_IS_ELEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_ELEMENT))
#define EDWINSPIRE_HTML_IS_ELEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_ELEMENT))
#define EDWINSPIRE_HTML_ELEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_ELEMENT, edwinspireHtmlElementClass))

typedef struct _edwinspireHtmlElement edwinspireHtmlElement;
typedef struct _edwinspireHtmlElementClass edwinspireHtmlElementClass;
typedef struct _edwinspireHtmlElementPrivate edwinspireHtmlElementPrivate;

#define EDWINSPIRE_HTML_TYPE_PROGRESS (edwinspire_html_progress_get_type ())
#define EDWINSPIRE_HTML_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_PROGRESS, edwinspireHtmlPROGRESS))
#define EDWINSPIRE_HTML_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_PROGRESS, edwinspireHtmlPROGRESSClass))
#define EDWINSPIRE_HTML_IS_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_PROGRESS))
#define EDWINSPIRE_HTML_IS_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_PROGRESS))
#define EDWINSPIRE_HTML_PROGRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_PROGRESS, edwinspireHtmlPROGRESSClass))

typedef struct _edwinspireHtmlPROGRESS edwinspireHtmlPROGRESS;
typedef struct _edwinspireHtmlPROGRESSClass edwinspireHtmlPROGRESSClass;
typedef struct _edwinspireHtmlPROGRESSPrivate edwinspireHtmlPROGRESSPrivate;

#define EDWINSPIRE_HTML_TYPE_META (edwinspire_html_meta_get_type ())
#define EDWINSPIRE_HTML_META(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_META, edwinspireHtmlMETA))
#define EDWINSPIRE_HTML_META_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_META, edwinspireHtmlMETAClass))
#define EDWINSPIRE_HTML_IS_META(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_META))
#define EDWINSPIRE_HTML_IS_META_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_META))
#define EDWINSPIRE_HTML_META_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_META, edwinspireHtmlMETAClass))

typedef struct _edwinspireHtmlMETA edwinspireHtmlMETA;
typedef struct _edwinspireHtmlMETAClass edwinspireHtmlMETAClass;
typedef struct _edwinspireHtmlMETAPrivate edwinspireHtmlMETAPrivate;

#define EDWINSPIRE_HTML_TYPE_P (edwinspire_html_p_get_type ())
#define EDWINSPIRE_HTML_P(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_P, edwinspireHtmlP))
#define EDWINSPIRE_HTML_P_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_P, edwinspireHtmlPClass))
#define EDWINSPIRE_HTML_IS_P(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_P))
#define EDWINSPIRE_HTML_IS_P_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_P))
#define EDWINSPIRE_HTML_P_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_P, edwinspireHtmlPClass))

typedef struct _edwinspireHtmlP edwinspireHtmlP;
typedef struct _edwinspireHtmlPClass edwinspireHtmlPClass;
typedef struct _edwinspireHtmlPPrivate edwinspireHtmlPPrivate;

#define EDWINSPIRE_HTML_TYPE_SELECT (edwinspire_html_select_get_type ())
#define EDWINSPIRE_HTML_SELECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_SELECT, edwinspireHtmlSELECT))
#define EDWINSPIRE_HTML_SELECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_SELECT, edwinspireHtmlSELECTClass))
#define EDWINSPIRE_HTML_IS_SELECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_SELECT))
#define EDWINSPIRE_HTML_IS_SELECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_SELECT))
#define EDWINSPIRE_HTML_SELECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_SELECT, edwinspireHtmlSELECTClass))

typedef struct _edwinspireHtmlSELECT edwinspireHtmlSELECT;
typedef struct _edwinspireHtmlSELECTClass edwinspireHtmlSELECTClass;
typedef struct _edwinspireHtmlSELECTPrivate edwinspireHtmlSELECTPrivate;

#define EDWINSPIRE_HTML_TYPE_OPTION (edwinspire_html_option_get_type ())
#define EDWINSPIRE_HTML_OPTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_OPTION, edwinspireHtmlOPTION))
#define EDWINSPIRE_HTML_OPTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_OPTION, edwinspireHtmlOPTIONClass))
#define EDWINSPIRE_HTML_IS_OPTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_OPTION))
#define EDWINSPIRE_HTML_IS_OPTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_OPTION))
#define EDWINSPIRE_HTML_OPTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_OPTION, edwinspireHtmlOPTIONClass))

typedef struct _edwinspireHtmlOPTION edwinspireHtmlOPTION;
typedef struct _edwinspireHtmlOPTIONClass edwinspireHtmlOPTIONClass;
typedef struct _edwinspireHtmlOPTIONPrivate edwinspireHtmlOPTIONPrivate;

#define EDWINSPIRE_HTML_TYPE_BR (edwinspire_html_br_get_type ())
#define EDWINSPIRE_HTML_BR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_BR, edwinspireHtmlBR))
#define EDWINSPIRE_HTML_BR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_BR, edwinspireHtmlBRClass))
#define EDWINSPIRE_HTML_IS_BR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_BR))
#define EDWINSPIRE_HTML_IS_BR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_BR))
#define EDWINSPIRE_HTML_BR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_BR, edwinspireHtmlBRClass))

typedef struct _edwinspireHtmlBR edwinspireHtmlBR;
typedef struct _edwinspireHtmlBRClass edwinspireHtmlBRClass;
typedef struct _edwinspireHtmlBRPrivate edwinspireHtmlBRPrivate;

#define EDWINSPIRE_HTML_TYPE_TEXTAREA (edwinspire_html_textarea_get_type ())
#define EDWINSPIRE_HTML_TEXTAREA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_TEXTAREA, edwinspireHtmlTEXTAREA))
#define EDWINSPIRE_HTML_TEXTAREA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_TEXTAREA, edwinspireHtmlTEXTAREAClass))
#define EDWINSPIRE_HTML_IS_TEXTAREA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_TEXTAREA))
#define EDWINSPIRE_HTML_IS_TEXTAREA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_TEXTAREA))
#define EDWINSPIRE_HTML_TEXTAREA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_TEXTAREA, edwinspireHtmlTEXTAREAClass))

typedef struct _edwinspireHtmlTEXTAREA edwinspireHtmlTEXTAREA;
typedef struct _edwinspireHtmlTEXTAREAClass edwinspireHtmlTEXTAREAClass;
typedef struct _edwinspireHtmlTEXTAREAPrivate edwinspireHtmlTEXTAREAPrivate;

#define EDWINSPIRE_HTML_TYPE_OPTGROUP (edwinspire_html_optgroup_get_type ())
#define EDWINSPIRE_HTML_OPTGROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_OPTGROUP, edwinspireHtmlOPTGROUP))
#define EDWINSPIRE_HTML_OPTGROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_OPTGROUP, edwinspireHtmlOPTGROUPClass))
#define EDWINSPIRE_HTML_IS_OPTGROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_OPTGROUP))
#define EDWINSPIRE_HTML_IS_OPTGROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_OPTGROUP))
#define EDWINSPIRE_HTML_OPTGROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_OPTGROUP, edwinspireHtmlOPTGROUPClass))

typedef struct _edwinspireHtmlOPTGROUP edwinspireHtmlOPTGROUP;
typedef struct _edwinspireHtmlOPTGROUPClass edwinspireHtmlOPTGROUPClass;
typedef struct _edwinspireHtmlOPTGROUPPrivate edwinspireHtmlOPTGROUPPrivate;

#define EDWINSPIRE_HTML_TYPE_TITLE (edwinspire_html_title_get_type ())
#define EDWINSPIRE_HTML_TITLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_TITLE, edwinspireHtmlTITLE))
#define EDWINSPIRE_HTML_TITLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_TITLE, edwinspireHtmlTITLEClass))
#define EDWINSPIRE_HTML_IS_TITLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_TITLE))
#define EDWINSPIRE_HTML_IS_TITLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_TITLE))
#define EDWINSPIRE_HTML_TITLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_TITLE, edwinspireHtmlTITLEClass))

typedef struct _edwinspireHtmlTITLE edwinspireHtmlTITLE;
typedef struct _edwinspireHtmlTITLEClass edwinspireHtmlTITLEClass;
typedef struct _edwinspireHtmlTITLEPrivate edwinspireHtmlTITLEPrivate;

#define EDWINSPIRE_HTML_TYPE_STYLE (edwinspire_html_style_get_type ())
#define EDWINSPIRE_HTML_STYLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_STYLE, edwinspireHtmlSTYLE))
#define EDWINSPIRE_HTML_STYLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_STYLE, edwinspireHtmlSTYLEClass))
#define EDWINSPIRE_HTML_IS_STYLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_STYLE))
#define EDWINSPIRE_HTML_IS_STYLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_STYLE))
#define EDWINSPIRE_HTML_STYLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_STYLE, edwinspireHtmlSTYLEClass))

typedef struct _edwinspireHtmlSTYLE edwinspireHtmlSTYLE;
typedef struct _edwinspireHtmlSTYLEClass edwinspireHtmlSTYLEClass;
typedef struct _edwinspireHtmlSTYLEPrivate edwinspireHtmlSTYLEPrivate;

#define EDWINSPIRE_HTML_TYPE_A (edwinspire_html_a_get_type ())
#define EDWINSPIRE_HTML_A(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_A, edwinspireHtmlA))
#define EDWINSPIRE_HTML_A_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_A, edwinspireHtmlAClass))
#define EDWINSPIRE_HTML_IS_A(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_A))
#define EDWINSPIRE_HTML_IS_A_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_A))
#define EDWINSPIRE_HTML_A_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_A, edwinspireHtmlAClass))

typedef struct _edwinspireHtmlA edwinspireHtmlA;
typedef struct _edwinspireHtmlAClass edwinspireHtmlAClass;
typedef struct _edwinspireHtmlAPrivate edwinspireHtmlAPrivate;

#define EDWINSPIRE_HTML_TYPE_BUTTON (edwinspire_html_button_get_type ())
#define EDWINSPIRE_HTML_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_BUTTON, edwinspireHtmlBUTTON))
#define EDWINSPIRE_HTML_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_BUTTON, edwinspireHtmlBUTTONClass))
#define EDWINSPIRE_HTML_IS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_BUTTON))
#define EDWINSPIRE_HTML_IS_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_BUTTON))
#define EDWINSPIRE_HTML_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_BUTTON, edwinspireHtmlBUTTONClass))

typedef struct _edwinspireHtmlBUTTON edwinspireHtmlBUTTON;
typedef struct _edwinspireHtmlBUTTONClass edwinspireHtmlBUTTONClass;
typedef struct _edwinspireHtmlBUTTONPrivate edwinspireHtmlBUTTONPrivate;

#define EDWINSPIRE_HTML_TYPE_TYPE_DATA_FIELD (edwinspire_html_type_data_field_get_type ())

#define EDWINSPIRE_HTML_TYPE_LINK (edwinspire_html_link_get_type ())
#define EDWINSPIRE_HTML_LINK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_LINK, edwinspireHtmlLINK))
#define EDWINSPIRE_HTML_LINK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_LINK, edwinspireHtmlLINKClass))
#define EDWINSPIRE_HTML_IS_LINK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_LINK))
#define EDWINSPIRE_HTML_IS_LINK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_LINK))
#define EDWINSPIRE_HTML_LINK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_LINK, edwinspireHtmlLINKClass))

typedef struct _edwinspireHtmlLINK edwinspireHtmlLINK;
typedef struct _edwinspireHtmlLINKClass edwinspireHtmlLINKClass;
typedef struct _edwinspireHtmlLINKPrivate edwinspireHtmlLINKPrivate;

#define EDWINSPIRE_HTML_TYPE_SCRIPT (edwinspire_html_script_get_type ())
#define EDWINSPIRE_HTML_SCRIPT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_SCRIPT, edwinspireHtmlSCRIPT))
#define EDWINSPIRE_HTML_SCRIPT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_SCRIPT, edwinspireHtmlSCRIPTClass))
#define EDWINSPIRE_HTML_IS_SCRIPT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_SCRIPT))
#define EDWINSPIRE_HTML_IS_SCRIPT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_SCRIPT))
#define EDWINSPIRE_HTML_SCRIPT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_SCRIPT, edwinspireHtmlSCRIPTClass))

typedef struct _edwinspireHtmlSCRIPT edwinspireHtmlSCRIPT;
typedef struct _edwinspireHtmlSCRIPTClass edwinspireHtmlSCRIPTClass;
typedef struct _edwinspireHtmlSCRIPTPrivate edwinspireHtmlSCRIPTPrivate;

#define EDWINSPIRE_HTML_TYPE_DIV (edwinspire_html_div_get_type ())
#define EDWINSPIRE_HTML_DIV(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_DIV, edwinspireHtmlDIV))
#define EDWINSPIRE_HTML_DIV_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_DIV, edwinspireHtmlDIVClass))
#define EDWINSPIRE_HTML_IS_DIV(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_DIV))
#define EDWINSPIRE_HTML_IS_DIV_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_DIV))
#define EDWINSPIRE_HTML_DIV_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_DIV, edwinspireHtmlDIVClass))

typedef struct _edwinspireHtmlDIV edwinspireHtmlDIV;
typedef struct _edwinspireHtmlDIVClass edwinspireHtmlDIVClass;
typedef struct _edwinspireHtmlDIVPrivate edwinspireHtmlDIVPrivate;

#define EDWINSPIRE_HTML_TYPE_TBODY (edwinspire_html_tbody_get_type ())
#define EDWINSPIRE_HTML_TBODY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_TBODY, edwinspireHtmlTBODY))
#define EDWINSPIRE_HTML_TBODY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_TBODY, edwinspireHtmlTBODYClass))
#define EDWINSPIRE_HTML_IS_TBODY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_TBODY))
#define EDWINSPIRE_HTML_IS_TBODY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_TBODY))
#define EDWINSPIRE_HTML_TBODY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_TBODY, edwinspireHtmlTBODYClass))

typedef struct _edwinspireHtmlTBODY edwinspireHtmlTBODY;
typedef struct _edwinspireHtmlTBODYClass edwinspireHtmlTBODYClass;
typedef struct _edwinspireHtmlTBODYPrivate edwinspireHtmlTBODYPrivate;

#define EDWINSPIRE_HTML_TYPE_TFOOT (edwinspire_html_tfoot_get_type ())
#define EDWINSPIRE_HTML_TFOOT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_TFOOT, edwinspireHtmlTFOOT))
#define EDWINSPIRE_HTML_TFOOT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_TFOOT, edwinspireHtmlTFOOTClass))
#define EDWINSPIRE_HTML_IS_TFOOT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_TFOOT))
#define EDWINSPIRE_HTML_IS_TFOOT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_TFOOT))
#define EDWINSPIRE_HTML_TFOOT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_TFOOT, edwinspireHtmlTFOOTClass))

typedef struct _edwinspireHtmlTFOOT edwinspireHtmlTFOOT;
typedef struct _edwinspireHtmlTFOOTClass edwinspireHtmlTFOOTClass;
typedef struct _edwinspireHtmlTFOOTPrivate edwinspireHtmlTFOOTPrivate;

#define EDWINSPIRE_HTML_TYPE_THEAD (edwinspire_html_thead_get_type ())
#define EDWINSPIRE_HTML_THEAD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_THEAD, edwinspireHtmlTHEAD))
#define EDWINSPIRE_HTML_THEAD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_THEAD, edwinspireHtmlTHEADClass))
#define EDWINSPIRE_HTML_IS_THEAD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_THEAD))
#define EDWINSPIRE_HTML_IS_THEAD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_THEAD))
#define EDWINSPIRE_HTML_THEAD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_THEAD, edwinspireHtmlTHEADClass))

typedef struct _edwinspireHtmlTHEAD edwinspireHtmlTHEAD;
typedef struct _edwinspireHtmlTHEADClass edwinspireHtmlTHEADClass;
typedef struct _edwinspireHtmlTHEADPrivate edwinspireHtmlTHEADPrivate;

#define EDWINSPIRE_HTML_TYPE_OBJECT (edwinspire_html_object_get_type ())
#define EDWINSPIRE_HTML_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_OBJECT, edwinspireHtmlOBJECT))
#define EDWINSPIRE_HTML_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_OBJECT, edwinspireHtmlOBJECTClass))
#define EDWINSPIRE_HTML_IS_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_OBJECT))
#define EDWINSPIRE_HTML_IS_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_OBJECT))
#define EDWINSPIRE_HTML_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_OBJECT, edwinspireHtmlOBJECTClass))

typedef struct _edwinspireHtmlOBJECT edwinspireHtmlOBJECT;
typedef struct _edwinspireHtmlOBJECTClass edwinspireHtmlOBJECTClass;
typedef struct _edwinspireHtmlOBJECTPrivate edwinspireHtmlOBJECTPrivate;

#define EDWINSPIRE_HTML_TYPE_MISC (edwinspire_html_misc_get_type ())
#define EDWINSPIRE_HTML_MISC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_MISC, edwinspireHtmlMisc))
#define EDWINSPIRE_HTML_MISC_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_MISC, edwinspireHtmlMiscClass))
#define EDWINSPIRE_HTML_IS_MISC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_MISC))
#define EDWINSPIRE_HTML_IS_MISC_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_MISC))
#define EDWINSPIRE_HTML_MISC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_MISC, edwinspireHtmlMiscClass))

typedef struct _edwinspireHtmlMisc edwinspireHtmlMisc;
typedef struct _edwinspireHtmlMiscClass edwinspireHtmlMiscClass;
typedef struct _edwinspireHtmlMiscPrivate edwinspireHtmlMiscPrivate;

#define EDWINSPIRE_HTML_TYPE_TR (edwinspire_html_tr_get_type ())
#define EDWINSPIRE_HTML_TR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_TR, edwinspireHtmlTR))
#define EDWINSPIRE_HTML_TR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_TR, edwinspireHtmlTRClass))
#define EDWINSPIRE_HTML_IS_TR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_TR))
#define EDWINSPIRE_HTML_IS_TR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_TR))
#define EDWINSPIRE_HTML_TR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_TR, edwinspireHtmlTRClass))

typedef struct _edwinspireHtmlTR edwinspireHtmlTR;
typedef struct _edwinspireHtmlTRClass edwinspireHtmlTRClass;
typedef struct _edwinspireHtmlTRPrivate edwinspireHtmlTRPrivate;

#define EDWINSPIRE_HTML_TYPE_NAV (edwinspire_html_nav_get_type ())
#define EDWINSPIRE_HTML_NAV(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_NAV, edwinspireHtmlNAV))
#define EDWINSPIRE_HTML_NAV_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_NAV, edwinspireHtmlNAVClass))
#define EDWINSPIRE_HTML_IS_NAV(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_NAV))
#define EDWINSPIRE_HTML_IS_NAV_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_NAV))
#define EDWINSPIRE_HTML_NAV_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_NAV, edwinspireHtmlNAVClass))

typedef struct _edwinspireHtmlNAV edwinspireHtmlNAV;
typedef struct _edwinspireHtmlNAVClass edwinspireHtmlNAVClass;
typedef struct _edwinspireHtmlNAVPrivate edwinspireHtmlNAVPrivate;

#define EDWINSPIRE_HTML_TYPE_LABEL (edwinspire_html_label_get_type ())
#define EDWINSPIRE_HTML_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_LABEL, edwinspireHtmlLABEL))
#define EDWINSPIRE_HTML_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_LABEL, edwinspireHtmlLABELClass))
#define EDWINSPIRE_HTML_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_LABEL))
#define EDWINSPIRE_HTML_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_LABEL))
#define EDWINSPIRE_HTML_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_LABEL, edwinspireHtmlLABELClass))

typedef struct _edwinspireHtmlLABEL edwinspireHtmlLABEL;
typedef struct _edwinspireHtmlLABELClass edwinspireHtmlLABELClass;
typedef struct _edwinspireHtmlLABELPrivate edwinspireHtmlLABELPrivate;

#define EDWINSPIRE_HTML_TYPE_INPUT (edwinspire_html_input_get_type ())
#define EDWINSPIRE_HTML_INPUT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_INPUT, edwinspireHtmlINPUT))
#define EDWINSPIRE_HTML_INPUT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_INPUT, edwinspireHtmlINPUTClass))
#define EDWINSPIRE_HTML_IS_INPUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_INPUT))
#define EDWINSPIRE_HTML_IS_INPUT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_INPUT))
#define EDWINSPIRE_HTML_INPUT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_INPUT, edwinspireHtmlINPUTClass))

typedef struct _edwinspireHtmlINPUT edwinspireHtmlINPUT;
typedef struct _edwinspireHtmlINPUTClass edwinspireHtmlINPUTClass;
typedef struct _edwinspireHtmlINPUTPrivate edwinspireHtmlINPUTPrivate;

#define EDWINSPIRE_HTML_TYPE_LEGEND (edwinspire_html_legend_get_type ())
#define EDWINSPIRE_HTML_LEGEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_LEGEND, edwinspireHtmlLEGEND))
#define EDWINSPIRE_HTML_LEGEND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_LEGEND, edwinspireHtmlLEGENDClass))
#define EDWINSPIRE_HTML_IS_LEGEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_LEGEND))
#define EDWINSPIRE_HTML_IS_LEGEND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_LEGEND))
#define EDWINSPIRE_HTML_LEGEND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_LEGEND, edwinspireHtmlLEGENDClass))

typedef struct _edwinspireHtmlLEGEND edwinspireHtmlLEGEND;
typedef struct _edwinspireHtmlLEGENDClass edwinspireHtmlLEGENDClass;
typedef struct _edwinspireHtmlLEGENDPrivate edwinspireHtmlLEGENDPrivate;

#define EDWINSPIRE_HTML_TYPE_FIELDSET (edwinspire_html_fieldset_get_type ())
#define EDWINSPIRE_HTML_FIELDSET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_FIELDSET, edwinspireHtmlFIELDSET))
#define EDWINSPIRE_HTML_FIELDSET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_FIELDSET, edwinspireHtmlFIELDSETClass))
#define EDWINSPIRE_HTML_IS_FIELDSET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_FIELDSET))
#define EDWINSPIRE_HTML_IS_FIELDSET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_FIELDSET))
#define EDWINSPIRE_HTML_FIELDSET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_FIELDSET, edwinspireHtmlFIELDSETClass))

typedef struct _edwinspireHtmlFIELDSET edwinspireHtmlFIELDSET;
typedef struct _edwinspireHtmlFIELDSETClass edwinspireHtmlFIELDSETClass;
typedef struct _edwinspireHtmlFIELDSETPrivate edwinspireHtmlFIELDSETPrivate;

#define EDWINSPIRE_HTML_TYPE_FORM (edwinspire_html_form_get_type ())
#define EDWINSPIRE_HTML_FORM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_FORM, edwinspireHtmlFORM))
#define EDWINSPIRE_HTML_FORM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_FORM, edwinspireHtmlFORMClass))
#define EDWINSPIRE_HTML_IS_FORM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_FORM))
#define EDWINSPIRE_HTML_IS_FORM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_FORM))
#define EDWINSPIRE_HTML_FORM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_FORM, edwinspireHtmlFORMClass))

typedef struct _edwinspireHtmlFORM edwinspireHtmlFORM;
typedef struct _edwinspireHtmlFORMClass edwinspireHtmlFORMClass;
typedef struct _edwinspireHtmlFORMPrivate edwinspireHtmlFORMPrivate;

#define EDWINSPIRE_HTML_TYPE_TD (edwinspire_html_td_get_type ())
#define EDWINSPIRE_HTML_TD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_TD, edwinspireHtmlTD))
#define EDWINSPIRE_HTML_TD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_TD, edwinspireHtmlTDClass))
#define EDWINSPIRE_HTML_IS_TD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_TD))
#define EDWINSPIRE_HTML_IS_TD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_TD))
#define EDWINSPIRE_HTML_TD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_TD, edwinspireHtmlTDClass))

typedef struct _edwinspireHtmlTD edwinspireHtmlTD;
typedef struct _edwinspireHtmlTDClass edwinspireHtmlTDClass;
typedef struct _edwinspireHtmlTDPrivate edwinspireHtmlTDPrivate;

#define EDWINSPIRE_HTML_TYPE_TH (edwinspire_html_th_get_type ())
#define EDWINSPIRE_HTML_TH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_TH, edwinspireHtmlTH))
#define EDWINSPIRE_HTML_TH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_TH, edwinspireHtmlTHClass))
#define EDWINSPIRE_HTML_IS_TH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_TH))
#define EDWINSPIRE_HTML_IS_TH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_TH))
#define EDWINSPIRE_HTML_TH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_TH, edwinspireHtmlTHClass))

typedef struct _edwinspireHtmlTH edwinspireHtmlTH;
typedef struct _edwinspireHtmlTHClass edwinspireHtmlTHClass;
typedef struct _edwinspireHtmlTHPrivate edwinspireHtmlTHPrivate;

#define EDWINSPIRE_HTML_TYPE_TABLE (edwinspire_html_table_get_type ())
#define EDWINSPIRE_HTML_TABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_TABLE, edwinspireHtmlTABLE))
#define EDWINSPIRE_HTML_TABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_TABLE, edwinspireHtmlTABLEClass))
#define EDWINSPIRE_HTML_IS_TABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_TABLE))
#define EDWINSPIRE_HTML_IS_TABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_TABLE))
#define EDWINSPIRE_HTML_TABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_TABLE, edwinspireHtmlTABLEClass))

typedef struct _edwinspireHtmlTABLE edwinspireHtmlTABLE;
typedef struct _edwinspireHtmlTABLEClass edwinspireHtmlTABLEClass;
typedef struct _edwinspireHtmlTABLEPrivate edwinspireHtmlTABLEPrivate;

#define EDWINSPIRE_HTML_TYPE_TABLE_DATA (edwinspire_html_table_data_get_type ())
#define EDWINSPIRE_HTML_TABLE_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_TABLE_DATA, edwinspireHtmlTABLEData))
#define EDWINSPIRE_HTML_TABLE_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_TABLE_DATA, edwinspireHtmlTABLEDataClass))
#define EDWINSPIRE_HTML_IS_TABLE_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_TABLE_DATA))
#define EDWINSPIRE_HTML_IS_TABLE_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_TABLE_DATA))
#define EDWINSPIRE_HTML_TABLE_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_TABLE_DATA, edwinspireHtmlTABLEDataClass))

typedef struct _edwinspireHtmlTABLEData edwinspireHtmlTABLEData;
typedef struct _edwinspireHtmlTABLEDataClass edwinspireHtmlTABLEDataClass;
typedef struct _edwinspireHtmlTABLEDataPrivate edwinspireHtmlTABLEDataPrivate;

#define EDWINSPIRE_HTML_TYPE_CAPTION (edwinspire_html_caption_get_type ())
#define EDWINSPIRE_HTML_CAPTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_CAPTION, edwinspireHtmlCAPTION))
#define EDWINSPIRE_HTML_CAPTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_CAPTION, edwinspireHtmlCAPTIONClass))
#define EDWINSPIRE_HTML_IS_CAPTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_CAPTION))
#define EDWINSPIRE_HTML_IS_CAPTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_CAPTION))
#define EDWINSPIRE_HTML_CAPTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_CAPTION, edwinspireHtmlCAPTIONClass))

typedef struct _edwinspireHtmlCAPTION edwinspireHtmlCAPTION;
typedef struct _edwinspireHtmlCAPTIONClass edwinspireHtmlCAPTIONClass;

#define EDWINSPIRE_HTML_TYPE_COLGROUP (edwinspire_html_colgroup_get_type ())
#define EDWINSPIRE_HTML_COLGROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_COLGROUP, edwinspireHtmlCOLGROUP))
#define EDWINSPIRE_HTML_COLGROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_COLGROUP, edwinspireHtmlCOLGROUPClass))
#define EDWINSPIRE_HTML_IS_COLGROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_COLGROUP))
#define EDWINSPIRE_HTML_IS_COLGROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_COLGROUP))
#define EDWINSPIRE_HTML_COLGROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_COLGROUP, edwinspireHtmlCOLGROUPClass))

typedef struct _edwinspireHtmlCOLGROUP edwinspireHtmlCOLGROUP;
typedef struct _edwinspireHtmlCOLGROUPClass edwinspireHtmlCOLGROUPClass;
typedef struct _edwinspireHtmlCOLGROUPPrivate edwinspireHtmlCOLGROUPPrivate;

#define EDWINSPIRE_HTML_TYPE_COL (edwinspire_html_col_get_type ())
#define EDWINSPIRE_HTML_COL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_COL, edwinspireHtmlCOL))
#define EDWINSPIRE_HTML_COL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_COL, edwinspireHtmlCOLClass))
#define EDWINSPIRE_HTML_IS_COL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_COL))
#define EDWINSPIRE_HTML_IS_COL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_COL))
#define EDWINSPIRE_HTML_COL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_COL, edwinspireHtmlCOLClass))

typedef struct _edwinspireHtmlCOL edwinspireHtmlCOL;
typedef struct _edwinspireHtmlCOLClass edwinspireHtmlCOLClass;
typedef struct _edwinspireHtmlCOLPrivate edwinspireHtmlCOLPrivate;

#define EDWINSPIRE_HTML_TYPE_H1 (edwinspire_html_h1_get_type ())
#define EDWINSPIRE_HTML_H1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_H1, edwinspireHtmlH1))
#define EDWINSPIRE_HTML_H1_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_H1, edwinspireHtmlH1Class))
#define EDWINSPIRE_HTML_IS_H1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_H1))
#define EDWINSPIRE_HTML_IS_H1_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_H1))
#define EDWINSPIRE_HTML_H1_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_H1, edwinspireHtmlH1Class))

typedef struct _edwinspireHtmlH1 edwinspireHtmlH1;
typedef struct _edwinspireHtmlH1Class edwinspireHtmlH1Class;
typedef struct _edwinspireHtmlH1Private edwinspireHtmlH1Private;

#define EDWINSPIRE_HTML_TYPE_H2 (edwinspire_html_h2_get_type ())
#define EDWINSPIRE_HTML_H2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_H2, edwinspireHtmlH2))
#define EDWINSPIRE_HTML_H2_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_H2, edwinspireHtmlH2Class))
#define EDWINSPIRE_HTML_IS_H2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_H2))
#define EDWINSPIRE_HTML_IS_H2_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_H2))
#define EDWINSPIRE_HTML_H2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_H2, edwinspireHtmlH2Class))

typedef struct _edwinspireHtmlH2 edwinspireHtmlH2;
typedef struct _edwinspireHtmlH2Class edwinspireHtmlH2Class;
typedef struct _edwinspireHtmlH2Private edwinspireHtmlH2Private;

#define EDWINSPIRE_HTML_TYPE_H3 (edwinspire_html_h3_get_type ())
#define EDWINSPIRE_HTML_H3(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_H3, edwinspireHtmlH3))
#define EDWINSPIRE_HTML_H3_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_H3, edwinspireHtmlH3Class))
#define EDWINSPIRE_HTML_IS_H3(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_H3))
#define EDWINSPIRE_HTML_IS_H3_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_H3))
#define EDWINSPIRE_HTML_H3_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_H3, edwinspireHtmlH3Class))

typedef struct _edwinspireHtmlH3 edwinspireHtmlH3;
typedef struct _edwinspireHtmlH3Class edwinspireHtmlH3Class;
typedef struct _edwinspireHtmlH3Private edwinspireHtmlH3Private;

#define EDWINSPIRE_HTML_TYPE_H4 (edwinspire_html_h4_get_type ())
#define EDWINSPIRE_HTML_H4(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_H4, edwinspireHtmlH4))
#define EDWINSPIRE_HTML_H4_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_H4, edwinspireHtmlH4Class))
#define EDWINSPIRE_HTML_IS_H4(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_H4))
#define EDWINSPIRE_HTML_IS_H4_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_H4))
#define EDWINSPIRE_HTML_H4_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_H4, edwinspireHtmlH4Class))

typedef struct _edwinspireHtmlH4 edwinspireHtmlH4;
typedef struct _edwinspireHtmlH4Class edwinspireHtmlH4Class;
typedef struct _edwinspireHtmlH4Private edwinspireHtmlH4Private;

#define EDWINSPIRE_HTML_TYPE_H5 (edwinspire_html_h5_get_type ())
#define EDWINSPIRE_HTML_H5(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_H5, edwinspireHtmlH5))
#define EDWINSPIRE_HTML_H5_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_H5, edwinspireHtmlH5Class))
#define EDWINSPIRE_HTML_IS_H5(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_H5))
#define EDWINSPIRE_HTML_IS_H5_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_H5))
#define EDWINSPIRE_HTML_H5_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_H5, edwinspireHtmlH5Class))

typedef struct _edwinspireHtmlH5 edwinspireHtmlH5;
typedef struct _edwinspireHtmlH5Class edwinspireHtmlH5Class;
typedef struct _edwinspireHtmlH5Private edwinspireHtmlH5Private;

#define EDWINSPIRE_HTML_TYPE_H6 (edwinspire_html_h6_get_type ())
#define EDWINSPIRE_HTML_H6(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_H6, edwinspireHtmlH6))
#define EDWINSPIRE_HTML_H6_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_H6, edwinspireHtmlH6Class))
#define EDWINSPIRE_HTML_IS_H6(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_H6))
#define EDWINSPIRE_HTML_IS_H6_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_H6))
#define EDWINSPIRE_HTML_H6_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_H6, edwinspireHtmlH6Class))

typedef struct _edwinspireHtmlH6 edwinspireHtmlH6;
typedef struct _edwinspireHtmlH6Class edwinspireHtmlH6Class;
typedef struct _edwinspireHtmlH6Private edwinspireHtmlH6Private;

#define EDWINSPIRE_HTML_TYPE_IMG (edwinspire_html_img_get_type ())
#define EDWINSPIRE_HTML_IMG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_IMG, edwinspireHtmlIMG))
#define EDWINSPIRE_HTML_IMG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_IMG, edwinspireHtmlIMGClass))
#define EDWINSPIRE_HTML_IS_IMG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_IMG))
#define EDWINSPIRE_HTML_IS_IMG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_IMG))
#define EDWINSPIRE_HTML_IMG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_IMG, edwinspireHtmlIMGClass))

typedef struct _edwinspireHtmlIMG edwinspireHtmlIMG;
typedef struct _edwinspireHtmlIMGClass edwinspireHtmlIMGClass;
typedef struct _edwinspireHtmlIMGPrivate edwinspireHtmlIMGPrivate;

#define EDWINSPIRE_HTML_TYPE_HEAD (edwinspire_html_head_get_type ())
#define EDWINSPIRE_HTML_HEAD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_HEAD, edwinspireHtmlHEAD))
#define EDWINSPIRE_HTML_HEAD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_HEAD, edwinspireHtmlHEADClass))
#define EDWINSPIRE_HTML_IS_HEAD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_HEAD))
#define EDWINSPIRE_HTML_IS_HEAD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_HEAD))
#define EDWINSPIRE_HTML_HEAD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_HEAD, edwinspireHtmlHEADClass))

typedef struct _edwinspireHtmlHEAD edwinspireHtmlHEAD;
typedef struct _edwinspireHtmlHEADClass edwinspireHtmlHEADClass;
typedef struct _edwinspireHtmlHEADPrivate edwinspireHtmlHEADPrivate;

#define EDWINSPIRE_HTML_TYPE_SPAN (edwinspire_html_span_get_type ())
#define EDWINSPIRE_HTML_SPAN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_SPAN, edwinspireHtmlSPAN))
#define EDWINSPIRE_HTML_SPAN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_SPAN, edwinspireHtmlSPANClass))
#define EDWINSPIRE_HTML_IS_SPAN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_SPAN))
#define EDWINSPIRE_HTML_IS_SPAN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_SPAN))
#define EDWINSPIRE_HTML_SPAN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_SPAN, edwinspireHtmlSPANClass))

typedef struct _edwinspireHtmlSPAN edwinspireHtmlSPAN;
typedef struct _edwinspireHtmlSPANClass edwinspireHtmlSPANClass;
typedef struct _edwinspireHtmlSPANPrivate edwinspireHtmlSPANPrivate;
typedef struct _edwinspireHtmlCAPTIONPrivate edwinspireHtmlCAPTIONPrivate;

#define EDWINSPIRE_HTML_TYPE_OL (edwinspire_html_ol_get_type ())
#define EDWINSPIRE_HTML_OL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_OL, edwinspireHtmlOL))
#define EDWINSPIRE_HTML_OL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_OL, edwinspireHtmlOLClass))
#define EDWINSPIRE_HTML_IS_OL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_OL))
#define EDWINSPIRE_HTML_IS_OL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_OL))
#define EDWINSPIRE_HTML_OL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_OL, edwinspireHtmlOLClass))

typedef struct _edwinspireHtmlOL edwinspireHtmlOL;
typedef struct _edwinspireHtmlOLClass edwinspireHtmlOLClass;
typedef struct _edwinspireHtmlOLPrivate edwinspireHtmlOLPrivate;

#define EDWINSPIRE_HTML_TYPE_BODY (edwinspire_html_body_get_type ())
#define EDWINSPIRE_HTML_BODY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_BODY, edwinspireHtmlBODY))
#define EDWINSPIRE_HTML_BODY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_BODY, edwinspireHtmlBODYClass))
#define EDWINSPIRE_HTML_IS_BODY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_BODY))
#define EDWINSPIRE_HTML_IS_BODY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_BODY))
#define EDWINSPIRE_HTML_BODY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_BODY, edwinspireHtmlBODYClass))

typedef struct _edwinspireHtmlBODY edwinspireHtmlBODY;
typedef struct _edwinspireHtmlBODYClass edwinspireHtmlBODYClass;
typedef struct _edwinspireHtmlBODYPrivate edwinspireHtmlBODYPrivate;

#define EDWINSPIRE_HTML_TYPE_UL (edwinspire_html_ul_get_type ())
#define EDWINSPIRE_HTML_UL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_UL, edwinspireHtmlUL))
#define EDWINSPIRE_HTML_UL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_UL, edwinspireHtmlULClass))
#define EDWINSPIRE_HTML_IS_UL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_UL))
#define EDWINSPIRE_HTML_IS_UL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_UL))
#define EDWINSPIRE_HTML_UL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_UL, edwinspireHtmlULClass))

typedef struct _edwinspireHtmlUL edwinspireHtmlUL;
typedef struct _edwinspireHtmlULClass edwinspireHtmlULClass;
typedef struct _edwinspireHtmlULPrivate edwinspireHtmlULPrivate;

#define EDWINSPIRE_HTML_TYPE_LI (edwinspire_html_li_get_type ())
#define EDWINSPIRE_HTML_LI(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_LI, edwinspireHtmlLI))
#define EDWINSPIRE_HTML_LI_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_LI, edwinspireHtmlLIClass))
#define EDWINSPIRE_HTML_IS_LI(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_LI))
#define EDWINSPIRE_HTML_IS_LI_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_LI))
#define EDWINSPIRE_HTML_LI_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_LI, edwinspireHtmlLIClass))

typedef struct _edwinspireHtmlLI edwinspireHtmlLI;
typedef struct _edwinspireHtmlLIClass edwinspireHtmlLIClass;
typedef struct _edwinspireHtmlLIPrivate edwinspireHtmlLIPrivate;

#define EDWINSPIRE_HTML_TYPE_HTML (edwinspire_html_html_get_type ())
#define EDWINSPIRE_HTML_HTML(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_HTML_TYPE_HTML, edwinspireHtmlHTML))
#define EDWINSPIRE_HTML_HTML_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_HTML_TYPE_HTML, edwinspireHtmlHTMLClass))
#define EDWINSPIRE_HTML_IS_HTML(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_HTML_TYPE_HTML))
#define EDWINSPIRE_HTML_IS_HTML_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_HTML_TYPE_HTML))
#define EDWINSPIRE_HTML_HTML_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_HTML_TYPE_HTML, edwinspireHtmlHTMLClass))

typedef struct _edwinspireHtmlHTML edwinspireHtmlHTML;
typedef struct _edwinspireHtmlHTMLClass edwinspireHtmlHTMLClass;
typedef struct _edwinspireHtmlHTMLPrivate edwinspireHtmlHTMLPrivate;

#define EDWINSPIRE_HTML_TYPE_ATTR_DROP_ZONE (edwinspire_html_attr_drop_zone_get_type ())

#define EDWINSPIRE_HTML_TYPE_ATTR_STATE (edwinspire_html_attr_state_get_type ())

typedef enum  {
	EDWINSPIRE_HTML_ATTR_DIR_NONE,
	EDWINSPIRE_HTML_ATTR_DIR_LTR,
	EDWINSPIRE_HTML_ATTR_DIR_RTL
} edwinspireHtmlAttrDir;

struct _edwinspireHtmlElement {
	GObject parent_instance;
	edwinspireHtmlElementPrivate * priv;
	gchar* Tag;
	gboolean TagEndIsRequired;
	gboolean AllowAddElement;
	gboolean AllowAddElementText;
};

struct _edwinspireHtmlElementClass {
	GObjectClass parent_class;
};

struct _edwinspireHtmlPROGRESS {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlPROGRESSPrivate * priv;
};

struct _edwinspireHtmlPROGRESSClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlMETA {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlMETAPrivate * priv;
};

struct _edwinspireHtmlMETAClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlP {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlPPrivate * priv;
};

struct _edwinspireHtmlPClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlSELECT {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlSELECTPrivate * priv;
};

struct _edwinspireHtmlSELECTClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlOPTION {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlOPTIONPrivate * priv;
};

struct _edwinspireHtmlOPTIONClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlBR {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlBRPrivate * priv;
};

struct _edwinspireHtmlBRClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlTEXTAREA {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlTEXTAREAPrivate * priv;
};

struct _edwinspireHtmlTEXTAREAClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlOPTGROUP {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlOPTGROUPPrivate * priv;
};

struct _edwinspireHtmlOPTGROUPClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlTITLE {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlTITLEPrivate * priv;
};

struct _edwinspireHtmlTITLEClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlSTYLE {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlSTYLEPrivate * priv;
};

struct _edwinspireHtmlSTYLEClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlA {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlAPrivate * priv;
};

struct _edwinspireHtmlAClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlBUTTON {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlBUTTONPrivate * priv;
};

struct _edwinspireHtmlBUTTONClass {
	edwinspireHtmlElementClass parent_class;
};

typedef enum  {
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Hidden,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Text,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Search,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Tel,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Url,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Email,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Password,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_DateTime,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Date,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Month,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Week,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Time,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_DateTimeLocal,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Number,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Range,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Color,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_CheckBox,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Radio,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_File,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Submit,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Image,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Reset,
	EDWINSPIRE_HTML_TYPE_DATA_FIELD_Button
} edwinspireHtmlTypeDataField;

struct _edwinspireHtmlLINK {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlLINKPrivate * priv;
};

struct _edwinspireHtmlLINKClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlSCRIPT {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlSCRIPTPrivate * priv;
};

struct _edwinspireHtmlSCRIPTClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlDIV {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlDIVPrivate * priv;
};

struct _edwinspireHtmlDIVClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlTBODY {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlTBODYPrivate * priv;
};

struct _edwinspireHtmlTBODYClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlTFOOT {
	edwinspireHtmlTBODY parent_instance;
	edwinspireHtmlTFOOTPrivate * priv;
};

struct _edwinspireHtmlTFOOTClass {
	edwinspireHtmlTBODYClass parent_class;
};

struct _edwinspireHtmlTHEAD {
	edwinspireHtmlTBODY parent_instance;
	edwinspireHtmlTHEADPrivate * priv;
};

struct _edwinspireHtmlTHEADClass {
	edwinspireHtmlTBODYClass parent_class;
};

struct _edwinspireHtmlOBJECT {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlOBJECTPrivate * priv;
};

struct _edwinspireHtmlOBJECTClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlMisc {
	GObject parent_instance;
	edwinspireHtmlMiscPrivate * priv;
};

struct _edwinspireHtmlMiscClass {
	GObjectClass parent_class;
};

struct _edwinspireHtmlTR {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlTRPrivate * priv;
};

struct _edwinspireHtmlTRClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlNAV {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlNAVPrivate * priv;
};

struct _edwinspireHtmlNAVClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlLABEL {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlLABELPrivate * priv;
};

struct _edwinspireHtmlLABELClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlINPUT {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlINPUTPrivate * priv;
};

struct _edwinspireHtmlINPUTClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlLEGEND {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlLEGENDPrivate * priv;
};

struct _edwinspireHtmlLEGENDClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlFIELDSET {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlFIELDSETPrivate * priv;
};

struct _edwinspireHtmlFIELDSETClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlFORM {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlFORMPrivate * priv;
};

struct _edwinspireHtmlFORMClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlTD {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlTDPrivate * priv;
};

struct _edwinspireHtmlTDClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlTH {
	edwinspireHtmlTD parent_instance;
	edwinspireHtmlTHPrivate * priv;
};

struct _edwinspireHtmlTHClass {
	edwinspireHtmlTDClass parent_class;
};

struct _edwinspireHtmlTABLE {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlTABLEPrivate * priv;
};

struct _edwinspireHtmlTABLEClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlTABLEData {
	edwinspireHtmlTABLE parent_instance;
	edwinspireHtmlTABLEDataPrivate * priv;
	edwinspireHtmlCAPTION* Caption;
	edwinspireHtmlTR* TRHeader;
	edwinspireHtmlTR* TRFoot;
	edwinspireHtmlTR* RowDefault;
};

struct _edwinspireHtmlTABLEDataClass {
	edwinspireHtmlTABLEClass parent_class;
};

struct _edwinspireHtmlCOLGROUP {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlCOLGROUPPrivate * priv;
};

struct _edwinspireHtmlCOLGROUPClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlCOL {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlCOLPrivate * priv;
};

struct _edwinspireHtmlCOLClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlH1 {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlH1Private * priv;
};

struct _edwinspireHtmlH1Class {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlH2 {
	edwinspireHtmlH1 parent_instance;
	edwinspireHtmlH2Private * priv;
};

struct _edwinspireHtmlH2Class {
	edwinspireHtmlH1Class parent_class;
};

struct _edwinspireHtmlH3 {
	edwinspireHtmlH1 parent_instance;
	edwinspireHtmlH3Private * priv;
};

struct _edwinspireHtmlH3Class {
	edwinspireHtmlH1Class parent_class;
};

struct _edwinspireHtmlH4 {
	edwinspireHtmlH1 parent_instance;
	edwinspireHtmlH4Private * priv;
};

struct _edwinspireHtmlH4Class {
	edwinspireHtmlH1Class parent_class;
};

struct _edwinspireHtmlH5 {
	edwinspireHtmlH1 parent_instance;
	edwinspireHtmlH5Private * priv;
};

struct _edwinspireHtmlH5Class {
	edwinspireHtmlH1Class parent_class;
};

struct _edwinspireHtmlH6 {
	edwinspireHtmlH1 parent_instance;
	edwinspireHtmlH6Private * priv;
};

struct _edwinspireHtmlH6Class {
	edwinspireHtmlH1Class parent_class;
};

struct _edwinspireHtmlIMG {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlIMGPrivate * priv;
};

struct _edwinspireHtmlIMGClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlHEAD {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlHEADPrivate * priv;
};

struct _edwinspireHtmlHEADClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlSPAN {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlSPANPrivate * priv;
};

struct _edwinspireHtmlSPANClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlCAPTION {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlCAPTIONPrivate * priv;
};

struct _edwinspireHtmlCAPTIONClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlOL {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlOLPrivate * priv;
};

struct _edwinspireHtmlOLClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlBODY {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlBODYPrivate * priv;
};

struct _edwinspireHtmlBODYClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlUL {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlULPrivate * priv;
};

struct _edwinspireHtmlULClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlLI {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlLIPrivate * priv;
};

struct _edwinspireHtmlLIClass {
	edwinspireHtmlElementClass parent_class;
};

struct _edwinspireHtmlHTML {
	edwinspireHtmlElement parent_instance;
	edwinspireHtmlHTMLPrivate * priv;
};

struct _edwinspireHtmlHTMLClass {
	edwinspireHtmlElementClass parent_class;
};

typedef enum  {
	EDWINSPIRE_HTML_ATTR_DROP_ZONE_None,
	EDWINSPIRE_HTML_ATTR_DROP_ZONE_Copy,
	EDWINSPIRE_HTML_ATTR_DROP_ZONE_Nove,
	EDWINSPIRE_HTML_ATTR_DROP_ZONE_Link
} edwinspireHtmlAttrDropZone;

typedef enum  {
	EDWINSPIRE_HTML_ATTR_STATE_None,
	EDWINSPIRE_HTML_ATTR_STATE_Yes,
	EDWINSPIRE_HTML_ATTR_STATE_No
} edwinspireHtmlAttrState;


GType edwinspire_html_attr_dir_get_type (void) G_GNUC_CONST;
GType edwinspire_html_element_get_type (void) G_GNUC_CONST;
GType edwinspire_html_progress_get_type (void) G_GNUC_CONST;
edwinspireHtmlPROGRESS* edwinspire_html_progress_new (void);
edwinspireHtmlPROGRESS* edwinspire_html_progress_construct (GType object_type);
gdouble edwinspire_html_progress_get_Value (edwinspireHtmlPROGRESS* self);
void edwinspire_html_progress_set_Value (edwinspireHtmlPROGRESS* self, gdouble value);
gdouble edwinspire_html_progress_get_Max (edwinspireHtmlPROGRESS* self);
void edwinspire_html_progress_set_Max (edwinspireHtmlPROGRESS* self, gdouble value);
GType edwinspire_html_meta_get_type (void) G_GNUC_CONST;
edwinspireHtmlMETA* edwinspire_html_meta_new (void);
edwinspireHtmlMETA* edwinspire_html_meta_construct (GType object_type);
const gchar* edwinspire_html_meta_get_Name (edwinspireHtmlMETA* self);
void edwinspire_html_meta_set_Name (edwinspireHtmlMETA* self, const gchar* value);
const gchar* edwinspire_html_meta_get_HttpEquiv (edwinspireHtmlMETA* self);
void edwinspire_html_meta_set_HttpEquiv (edwinspireHtmlMETA* self, const gchar* value);
const gchar* edwinspire_html_meta_get_Content (edwinspireHtmlMETA* self);
void edwinspire_html_meta_set_Content (edwinspireHtmlMETA* self, const gchar* value);
const gchar* edwinspire_html_meta_get_CharSet (edwinspireHtmlMETA* self);
void edwinspire_html_meta_set_CharSet (edwinspireHtmlMETA* self, const gchar* value);
GType edwinspire_html_p_get_type (void) G_GNUC_CONST;
edwinspireHtmlP* edwinspire_html_p_new (void);
edwinspireHtmlP* edwinspire_html_p_construct (GType object_type);
GType edwinspire_html_select_get_type (void) G_GNUC_CONST;
edwinspireHtmlSELECT* edwinspire_html_select_new (void);
edwinspireHtmlSELECT* edwinspire_html_select_construct (GType object_type);
gboolean edwinspire_html_select_addElement (edwinspireHtmlSELECT* self, edwinspireHtmlElement* e);
gboolean edwinspire_html_select_get_AutoFocus (edwinspireHtmlSELECT* self);
void edwinspire_html_select_set_AutoFocus (edwinspireHtmlSELECT* self, gboolean value);
gboolean edwinspire_html_select_get_Disabled (edwinspireHtmlSELECT* self);
void edwinspire_html_select_set_Disabled (edwinspireHtmlSELECT* self, gboolean value);
gboolean edwinspire_html_select_get_Multiple (edwinspireHtmlSELECT* self);
void edwinspire_html_select_set_Multiple (edwinspireHtmlSELECT* self, gboolean value);
const gchar* edwinspire_html_select_get_Name (edwinspireHtmlSELECT* self);
void edwinspire_html_select_set_Name (edwinspireHtmlSELECT* self, const gchar* value);
gboolean edwinspire_html_select_get_Required (edwinspireHtmlSELECT* self);
void edwinspire_html_select_set_Required (edwinspireHtmlSELECT* self, gboolean value);
gint edwinspire_html_select_get_Size (edwinspireHtmlSELECT* self);
void edwinspire_html_select_set_Size (edwinspireHtmlSELECT* self, gint value);
GType edwinspire_html_option_get_type (void) G_GNUC_CONST;
edwinspireHtmlOPTION* edwinspire_html_option_new (void);
edwinspireHtmlOPTION* edwinspire_html_option_construct (GType object_type);
gboolean edwinspire_html_option_get_Disabled (edwinspireHtmlOPTION* self);
void edwinspire_html_option_set_Disabled (edwinspireHtmlOPTION* self, gboolean value);
gboolean edwinspire_html_option_get_Selected (edwinspireHtmlOPTION* self);
void edwinspire_html_option_set_Selected (edwinspireHtmlOPTION* self, gboolean value);
const gchar* edwinspire_html_option_get_Label (edwinspireHtmlOPTION* self);
void edwinspire_html_option_set_Label (edwinspireHtmlOPTION* self, const gchar* value);
const gchar* edwinspire_html_option_get_Value (edwinspireHtmlOPTION* self);
void edwinspire_html_option_set_Value (edwinspireHtmlOPTION* self, const gchar* value);
GType edwinspire_html_br_get_type (void) G_GNUC_CONST;
edwinspireHtmlBR* edwinspire_html_br_new (void);
edwinspireHtmlBR* edwinspire_html_br_construct (GType object_type);
GType edwinspire_html_textarea_get_type (void) G_GNUC_CONST;
edwinspireHtmlTEXTAREA* edwinspire_html_textarea_new (void);
edwinspireHtmlTEXTAREA* edwinspire_html_textarea_construct (GType object_type);
gboolean edwinspire_html_textarea_get_AutoFocus (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_AutoFocus (edwinspireHtmlTEXTAREA* self, gboolean value);
guint edwinspire_html_textarea_get_Cols (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_Cols (edwinspireHtmlTEXTAREA* self, guint value);
const gchar* edwinspire_html_textarea_get_DirName (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_DirName (edwinspireHtmlTEXTAREA* self, const gchar* value);
gboolean edwinspire_html_textarea_get_Disabled (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_Disabled (edwinspireHtmlTEXTAREA* self, gboolean value);
guint edwinspire_html_textarea_get_MaxLength (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_MaxLength (edwinspireHtmlTEXTAREA* self, guint value);
const gchar* edwinspire_html_textarea_get_Name (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_Name (edwinspireHtmlTEXTAREA* self, const gchar* value);
const gchar* edwinspire_html_textarea_get_PlaceHolder (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_PlaceHolder (edwinspireHtmlTEXTAREA* self, const gchar* value);
gboolean edwinspire_html_textarea_get_ReadOnly (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_ReadOnly (edwinspireHtmlTEXTAREA* self, gboolean value);
gboolean edwinspire_html_textarea_get_Required (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_Required (edwinspireHtmlTEXTAREA* self, gboolean value);
guint edwinspire_html_textarea_get_Rows (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_Rows (edwinspireHtmlTEXTAREA* self, guint value);
const gchar* edwinspire_html_textarea_get_Wrap (edwinspireHtmlTEXTAREA* self);
void edwinspire_html_textarea_set_Wrap (edwinspireHtmlTEXTAREA* self, const gchar* value);
GType edwinspire_html_optgroup_get_type (void) G_GNUC_CONST;
edwinspireHtmlOPTGROUP* edwinspire_html_optgroup_new (void);
edwinspireHtmlOPTGROUP* edwinspire_html_optgroup_construct (GType object_type);
gboolean edwinspire_html_optgroup_get_Disabled (edwinspireHtmlOPTGROUP* self);
void edwinspire_html_optgroup_set_Disabled (edwinspireHtmlOPTGROUP* self, gboolean value);
const gchar* edwinspire_html_optgroup_get_Label (edwinspireHtmlOPTGROUP* self);
void edwinspire_html_optgroup_set_Label (edwinspireHtmlOPTGROUP* self, const gchar* value);
GType edwinspire_html_title_get_type (void) G_GNUC_CONST;
edwinspireHtmlTITLE* edwinspire_html_title_new (const gchar* title);
edwinspireHtmlTITLE* edwinspire_html_title_construct (GType object_type, const gchar* title);
void edwinspire_html_title_SetTitle (edwinspireHtmlTITLE* self, const gchar* title);
GType edwinspire_html_style_get_type (void) G_GNUC_CONST;
edwinspireHtmlSTYLE* edwinspire_html_style_new (void);
edwinspireHtmlSTYLE* edwinspire_html_style_construct (GType object_type);
const gchar* edwinspire_html_style_get_Media (edwinspireHtmlSTYLE* self);
void edwinspire_html_style_set_Media (edwinspireHtmlSTYLE* self, const gchar* value);
const gchar* edwinspire_html_style_get_Type (edwinspireHtmlSTYLE* self);
void edwinspire_html_style_set_Type (edwinspireHtmlSTYLE* self, const gchar* value);
gboolean edwinspire_html_style_get_Scoped (edwinspireHtmlSTYLE* self);
void edwinspire_html_style_set_Scoped (edwinspireHtmlSTYLE* self, gboolean value);
const gchar* edwinspire_html_style_get_Define (edwinspireHtmlSTYLE* self);
void edwinspire_html_style_set_Define (edwinspireHtmlSTYLE* self, const gchar* value);
GType edwinspire_html_a_get_type (void) G_GNUC_CONST;
edwinspireHtmlA* edwinspire_html_a_new (void);
edwinspireHtmlA* edwinspire_html_a_construct (GType object_type);
edwinspireHtmlA* edwinspire_html_a_new_with_args (const gchar* text, const gchar* href);
edwinspireHtmlA* edwinspire_html_a_construct_with_args (GType object_type, const gchar* text, const gchar* href);
const gchar* edwinspire_html_a_get_Href (edwinspireHtmlA* self);
void edwinspire_html_a_set_Href (edwinspireHtmlA* self, const gchar* value);
const gchar* edwinspire_html_a_get_Target (edwinspireHtmlA* self);
void edwinspire_html_a_set_Target (edwinspireHtmlA* self, const gchar* value);
const gchar* edwinspire_html_a_get_Rel (edwinspireHtmlA* self);
void edwinspire_html_a_set_Rel (edwinspireHtmlA* self, const gchar* value);
const gchar* edwinspire_html_a_get_Media (edwinspireHtmlA* self);
void edwinspire_html_a_set_Media (edwinspireHtmlA* self, const gchar* value);
const gchar* edwinspire_html_a_get_HrefLang (edwinspireHtmlA* self);
void edwinspire_html_a_set_HrefLang (edwinspireHtmlA* self, const gchar* value);
const gchar* edwinspire_html_a_get_Type (edwinspireHtmlA* self);
void edwinspire_html_a_set_Type (edwinspireHtmlA* self, const gchar* value);
GType edwinspire_html_button_get_type (void) G_GNUC_CONST;
edwinspireHtmlBUTTON* edwinspire_html_button_new (void);
edwinspireHtmlBUTTON* edwinspire_html_button_construct (GType object_type);
gboolean edwinspire_html_button_get_AutoFocus (edwinspireHtmlBUTTON* self);
void edwinspire_html_button_set_AutoFocus (edwinspireHtmlBUTTON* self, gboolean value);
gboolean edwinspire_html_button_get_Disabled (edwinspireHtmlBUTTON* self);
void edwinspire_html_button_set_Disabled (edwinspireHtmlBUTTON* self, gboolean value);
const gchar* edwinspire_html_button_get_FormAction (edwinspireHtmlBUTTON* self);
void edwinspire_html_button_set_FormAction (edwinspireHtmlBUTTON* self, const gchar* value);
const gchar* edwinspire_html_button_get_FormEncType (edwinspireHtmlBUTTON* self);
void edwinspire_html_button_set_FormEncType (edwinspireHtmlBUTTON* self, const gchar* value);
const gchar* edwinspire_html_button_get_FormMethod (edwinspireHtmlBUTTON* self);
void edwinspire_html_button_set_FormMethod (edwinspireHtmlBUTTON* self, const gchar* value);
gboolean edwinspire_html_button_get_FormNoValidate (edwinspireHtmlBUTTON* self);
void edwinspire_html_button_set_FormNoValidate (edwinspireHtmlBUTTON* self, gboolean value);
GType edwinspire_html_type_data_field_get_type (void) G_GNUC_CONST;
edwinspireHtmlTypeDataField edwinspire_html_button_get_Type (edwinspireHtmlBUTTON* self);
void edwinspire_html_button_set_Type (edwinspireHtmlBUTTON* self, edwinspireHtmlTypeDataField value);
const gchar* edwinspire_html_button_get_FormTarget (edwinspireHtmlBUTTON* self);
void edwinspire_html_button_set_FormTarget (edwinspireHtmlBUTTON* self, const gchar* value);
const gchar* edwinspire_html_button_get_Name (edwinspireHtmlBUTTON* self);
void edwinspire_html_button_set_Name (edwinspireHtmlBUTTON* self, const gchar* value);
const gchar* edwinspire_html_button_get_Value (edwinspireHtmlBUTTON* self);
void edwinspire_html_button_set_Value (edwinspireHtmlBUTTON* self, const gchar* value);
GType edwinspire_html_link_get_type (void) G_GNUC_CONST;
edwinspireHtmlLINK* edwinspire_html_link_new (void);
edwinspireHtmlLINK* edwinspire_html_link_construct (GType object_type);
const gchar* edwinspire_html_link_get_Href (edwinspireHtmlLINK* self);
void edwinspire_html_link_set_Href (edwinspireHtmlLINK* self, const gchar* value);
const gchar* edwinspire_html_link_get_Rel (edwinspireHtmlLINK* self);
void edwinspire_html_link_set_Rel (edwinspireHtmlLINK* self, const gchar* value);
const gchar* edwinspire_html_link_get_Media (edwinspireHtmlLINK* self);
void edwinspire_html_link_set_Media (edwinspireHtmlLINK* self, const gchar* value);
const gchar* edwinspire_html_link_get_HrefLang (edwinspireHtmlLINK* self);
void edwinspire_html_link_set_HrefLang (edwinspireHtmlLINK* self, const gchar* value);
const gchar* edwinspire_html_link_get_Type (edwinspireHtmlLINK* self);
void edwinspire_html_link_set_Type (edwinspireHtmlLINK* self, const gchar* value);
const gchar* edwinspire_html_link_get_Sizes (edwinspireHtmlLINK* self);
void edwinspire_html_link_set_Sizes (edwinspireHtmlLINK* self, const gchar* value);
GType edwinspire_html_script_get_type (void) G_GNUC_CONST;
edwinspireHtmlSCRIPT* edwinspire_html_script_new (const gchar* code);
edwinspireHtmlSCRIPT* edwinspire_html_script_construct (GType object_type, const gchar* code);
void edwinspire_html_script_SetCode (edwinspireHtmlSCRIPT* self, const gchar* code);
void edwinspire_html_script_addCode (edwinspireHtmlSCRIPT* self, const gchar* code);
const gchar* edwinspire_html_script_get_Src (edwinspireHtmlSCRIPT* self);
void edwinspire_html_script_set_Src (edwinspireHtmlSCRIPT* self, const gchar* value);
gboolean edwinspire_html_script_get_Async (edwinspireHtmlSCRIPT* self);
void edwinspire_html_script_set_Async (edwinspireHtmlSCRIPT* self, gboolean value);
gboolean edwinspire_html_script_get_Defer (edwinspireHtmlSCRIPT* self);
void edwinspire_html_script_set_Defer (edwinspireHtmlSCRIPT* self, gboolean value);
const gchar* edwinspire_html_script_get_Type (edwinspireHtmlSCRIPT* self);
void edwinspire_html_script_set_Type (edwinspireHtmlSCRIPT* self, const gchar* value);
const gchar* edwinspire_html_script_get_CharSet (edwinspireHtmlSCRIPT* self);
void edwinspire_html_script_set_CharSet (edwinspireHtmlSCRIPT* self, const gchar* value);
GType edwinspire_html_div_get_type (void) G_GNUC_CONST;
edwinspireHtmlDIV* edwinspire_html_div_new (void);
edwinspireHtmlDIV* edwinspire_html_div_construct (GType object_type);
GType edwinspire_html_tbody_get_type (void) G_GNUC_CONST;
GType edwinspire_html_tfoot_get_type (void) G_GNUC_CONST;
edwinspireHtmlTFOOT* edwinspire_html_tfoot_new (void);
edwinspireHtmlTFOOT* edwinspire_html_tfoot_construct (GType object_type);
GType edwinspire_html_thead_get_type (void) G_GNUC_CONST;
edwinspireHtmlTHEAD* edwinspire_html_thead_new (void);
edwinspireHtmlTHEAD* edwinspire_html_thead_construct (GType object_type);
GType edwinspire_html_object_get_type (void) G_GNUC_CONST;
edwinspireHtmlOBJECT* edwinspire_html_object_new (void);
edwinspireHtmlOBJECT* edwinspire_html_object_construct (GType object_type);
const gchar* edwinspire_html_object_get_Data (edwinspireHtmlOBJECT* self);
void edwinspire_html_object_set_Data (edwinspireHtmlOBJECT* self, const gchar* value);
const gchar* edwinspire_html_object_get_Type (edwinspireHtmlOBJECT* self);
void edwinspire_html_object_set_Type (edwinspireHtmlOBJECT* self, const gchar* value);
const gchar* edwinspire_html_object_get_Standby (edwinspireHtmlOBJECT* self);
void edwinspire_html_object_set_Standby (edwinspireHtmlOBJECT* self, const gchar* value);
gboolean edwinspire_html_object_get_Declare (edwinspireHtmlOBJECT* self);
void edwinspire_html_object_set_Declare (edwinspireHtmlOBJECT* self, gboolean value);
gboolean edwinspire_html_object_get_TypeMustMatch (edwinspireHtmlOBJECT* self);
void edwinspire_html_object_set_TypeMustMatch (edwinspireHtmlOBJECT* self, gboolean value);
edwinspireHtmlTBODY* edwinspire_html_tbody_new (void);
edwinspireHtmlTBODY* edwinspire_html_tbody_construct (GType object_type);
gboolean edwinspire_html_tbody_addElement (edwinspireHtmlTBODY* self, edwinspireHtmlElement* e);
GType edwinspire_html_misc_get_type (void) G_GNUC_CONST;
edwinspireHtmlMisc* edwinspire_html_misc_new (void);
edwinspireHtmlMisc* edwinspire_html_misc_construct (GType object_type);
gint edwinspire_html_misc_LasIndexFromList (GeeSet* index);
GType edwinspire_html_tr_get_type (void) G_GNUC_CONST;
edwinspireHtmlTR* edwinspire_html_tr_new (void);
edwinspireHtmlTR* edwinspire_html_tr_construct (GType object_type);
gboolean edwinspire_html_tr_addElement (edwinspireHtmlTR* self, edwinspireHtmlElement* e);
void edwinspire_html_tr_addCell (edwinspireHtmlTR* self, edwinspireHtmlElement* e);
void edwinspire_html_tr_addCellText (edwinspireHtmlTR* self, const gchar* Text);
GType edwinspire_html_nav_get_type (void) G_GNUC_CONST;
edwinspireHtmlNAV* edwinspire_html_nav_new (void);
edwinspireHtmlNAV* edwinspire_html_nav_construct (GType object_type);
GType edwinspire_html_label_get_type (void) G_GNUC_CONST;
edwinspireHtmlLABEL* edwinspire_html_label_new (void);
edwinspireHtmlLABEL* edwinspire_html_label_construct (GType object_type);
const gchar* edwinspire_html_label_get_For (edwinspireHtmlLABEL* self);
void edwinspire_html_label_set_For (edwinspireHtmlLABEL* self, const gchar* value);
GType edwinspire_html_input_get_type (void) G_GNUC_CONST;
edwinspireHtmlINPUT* edwinspire_html_input_new (void);
edwinspireHtmlINPUT* edwinspire_html_input_construct (GType object_type);
const gchar* edwinspire_html_input_get_Accept (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Accept (edwinspireHtmlINPUT* self, const gchar* value);
const gchar* edwinspire_html_input_get_Alt (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Alt (edwinspireHtmlINPUT* self, const gchar* value);
const gchar* edwinspire_html_input_get_AutoComplete (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_AutoComplete (edwinspireHtmlINPUT* self, const gchar* value);
gboolean edwinspire_html_input_get_AutoFocus (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_AutoFocus (edwinspireHtmlINPUT* self, gboolean value);
gboolean edwinspire_html_input_get_Checked (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Checked (edwinspireHtmlINPUT* self, gboolean value);
const gchar* edwinspire_html_input_get_DirName (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_DirName (edwinspireHtmlINPUT* self, const gchar* value);
gboolean edwinspire_html_input_get_Disabled (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Disabled (edwinspireHtmlINPUT* self, gboolean value);
const gchar* edwinspire_html_input_get_FormAction (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_FormAction (edwinspireHtmlINPUT* self, const gchar* value);
const gchar* edwinspire_html_input_get_FormEncType (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_FormEncType (edwinspireHtmlINPUT* self, const gchar* value);
const gchar* edwinspire_html_input_get_FormMethod (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_FormMethod (edwinspireHtmlINPUT* self, const gchar* value);
gboolean edwinspire_html_input_get_FormNoValidate (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_FormNoValidate (edwinspireHtmlINPUT* self, gboolean value);
const gchar* edwinspire_html_input_get_FormTarget (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_FormTarget (edwinspireHtmlINPUT* self, const gchar* value);
gint edwinspire_html_input_get_Height (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Height (edwinspireHtmlINPUT* self, gint value);
gint edwinspire_html_input_get_MaxLength (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_MaxLength (edwinspireHtmlINPUT* self, gint value);
const gchar* edwinspire_html_input_get_Max (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Max (edwinspireHtmlINPUT* self, const gchar* value);
const gchar* edwinspire_html_input_get_Min (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Min (edwinspireHtmlINPUT* self, const gchar* value);
gboolean edwinspire_html_input_get_Multiple (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Multiple (edwinspireHtmlINPUT* self, gboolean value);
const gchar* edwinspire_html_input_get_Name (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Name (edwinspireHtmlINPUT* self, const gchar* value);
const gchar* edwinspire_html_input_get_Pattern (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Pattern (edwinspireHtmlINPUT* self, const gchar* value);
const gchar* edwinspire_html_input_get_PlaceHolder (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_PlaceHolder (edwinspireHtmlINPUT* self, const gchar* value);
gboolean edwinspire_html_input_get_ReadOnly (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_ReadOnly (edwinspireHtmlINPUT* self, gboolean value);
gboolean edwinspire_html_input_get_Required (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Required (edwinspireHtmlINPUT* self, gboolean value);
gint edwinspire_html_input_get_Size (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Size (edwinspireHtmlINPUT* self, gint value);
const gchar* edwinspire_html_input_get_Src (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Src (edwinspireHtmlINPUT* self, const gchar* value);
const gchar* edwinspire_html_input_get_Step (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Step (edwinspireHtmlINPUT* self, const gchar* value);
edwinspireHtmlTypeDataField edwinspire_html_input_get_Type (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Type (edwinspireHtmlINPUT* self, edwinspireHtmlTypeDataField value);
const gchar* edwinspire_html_input_get_Value (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Value (edwinspireHtmlINPUT* self, const gchar* value);
gint edwinspire_html_input_get_Width (edwinspireHtmlINPUT* self);
void edwinspire_html_input_set_Width (edwinspireHtmlINPUT* self, gint value);
GType edwinspire_html_legend_get_type (void) G_GNUC_CONST;
edwinspireHtmlLEGEND* edwinspire_html_legend_new (void);
edwinspireHtmlLEGEND* edwinspire_html_legend_construct (GType object_type);
GType edwinspire_html_fieldset_get_type (void) G_GNUC_CONST;
edwinspireHtmlFIELDSET* edwinspire_html_fieldset_new (void);
edwinspireHtmlFIELDSET* edwinspire_html_fieldset_construct (GType object_type);
gboolean edwinspire_html_fieldset_get_Disabled (edwinspireHtmlFIELDSET* self);
void edwinspire_html_fieldset_set_Disabled (edwinspireHtmlFIELDSET* self, gboolean value);
const gchar* edwinspire_html_fieldset_get_Name (edwinspireHtmlFIELDSET* self);
void edwinspire_html_fieldset_set_Name (edwinspireHtmlFIELDSET* self, const gchar* value);
GType edwinspire_html_form_get_type (void) G_GNUC_CONST;
edwinspireHtmlFORM* edwinspire_html_form_new (void);
edwinspireHtmlFORM* edwinspire_html_form_construct (GType object_type);
const gchar* edwinspire_html_form_get_AcceptCharSet (edwinspireHtmlFORM* self);
void edwinspire_html_form_set_AcceptCharSet (edwinspireHtmlFORM* self, const gchar* value);
const gchar* edwinspire_html_form_get_Action (edwinspireHtmlFORM* self);
void edwinspire_html_form_set_Action (edwinspireHtmlFORM* self, const gchar* value);
const gchar* edwinspire_html_form_get_AutoComplete (edwinspireHtmlFORM* self);
void edwinspire_html_form_set_AutoComplete (edwinspireHtmlFORM* self, const gchar* value);
const gchar* edwinspire_html_form_get_EncType (edwinspireHtmlFORM* self);
void edwinspire_html_form_set_EncType (edwinspireHtmlFORM* self, const gchar* value);
const gchar* edwinspire_html_form_get_Method (edwinspireHtmlFORM* self);
void edwinspire_html_form_set_Method (edwinspireHtmlFORM* self, const gchar* value);
const gchar* edwinspire_html_form_get_Name (edwinspireHtmlFORM* self);
void edwinspire_html_form_set_Name (edwinspireHtmlFORM* self, const gchar* value);
gboolean edwinspire_html_form_get_NoValidate (edwinspireHtmlFORM* self);
void edwinspire_html_form_set_NoValidate (edwinspireHtmlFORM* self, gboolean value);
const gchar* edwinspire_html_form_get_Target (edwinspireHtmlFORM* self);
void edwinspire_html_form_set_Target (edwinspireHtmlFORM* self, const gchar* value);
GType edwinspire_html_td_get_type (void) G_GNUC_CONST;
GType edwinspire_html_th_get_type (void) G_GNUC_CONST;
edwinspireHtmlTH* edwinspire_html_th_new (void);
edwinspireHtmlTH* edwinspire_html_th_construct (GType object_type);
edwinspireHtmlTD* edwinspire_html_td_new (void);
edwinspireHtmlTD* edwinspire_html_td_construct (GType object_type);
void edwinspire_html_td_addText (edwinspireHtmlTD* self, const gchar* Text);
gint edwinspire_html_td_get_ColSpan (edwinspireHtmlTD* self);
void edwinspire_html_td_set_ColSpan (edwinspireHtmlTD* self, gint value);
gint edwinspire_html_td_get_RowSpan (edwinspireHtmlTD* self);
void edwinspire_html_td_set_RowSpan (edwinspireHtmlTD* self, gint value);
const gchar* edwinspire_html_td_get_Headers (edwinspireHtmlTD* self);
void edwinspire_html_td_set_Headers (edwinspireHtmlTD* self, const gchar* value);
GType edwinspire_html_table_get_type (void) G_GNUC_CONST;
GType edwinspire_html_table_data_get_type (void) G_GNUC_CONST;
GType edwinspire_html_caption_get_type (void) G_GNUC_CONST;
edwinspireHtmlTABLEData* edwinspire_html_table_data_new (void);
edwinspireHtmlTABLEData* edwinspire_html_table_data_construct (GType object_type);
void edwinspire_html_table_data_Build (edwinspireHtmlTABLEData* self);
void edwinspire_html_table_data_addCellToHead (edwinspireHtmlTABLEData* self, edwinspireHtmlElement* cell);
void edwinspire_html_table_data_addCellTextToHead (edwinspireHtmlTABLEData* self, const gchar* Text);
void edwinspire_html_table_data_addCellToFoot (edwinspireHtmlTABLEData* self, edwinspireHtmlElement* cell);
void edwinspire_html_table_data_addCellTextToFoot (edwinspireHtmlTABLEData* self, const gchar* Text);
void edwinspire_html_table_data_addRow (edwinspireHtmlTABLEData* self, edwinspireHtmlTR* row);
void edwinspire_html_table_data_addRowDefault (edwinspireHtmlTABLEData* self);
gchar* edwinspire_html_table_data_CodeHtml (edwinspireHtmlTABLEData* self);
edwinspireHtmlTABLE* edwinspire_html_table_new (void);
edwinspireHtmlTABLE* edwinspire_html_table_construct (GType object_type);
gboolean edwinspire_html_table_addElement (edwinspireHtmlTABLE* self, edwinspireHtmlElement* e);
const gchar* edwinspire_html_table_get_Border (edwinspireHtmlTABLE* self);
void edwinspire_html_table_set_Border (edwinspireHtmlTABLE* self, const gchar* value);
GType edwinspire_html_colgroup_get_type (void) G_GNUC_CONST;
edwinspireHtmlCOLGROUP* edwinspire_html_colgroup_new (void);
edwinspireHtmlCOLGROUP* edwinspire_html_colgroup_construct (GType object_type);
gboolean edwinspire_html_colgroup_addElement (edwinspireHtmlCOLGROUP* self, edwinspireHtmlElement* e);
const gchar* edwinspire_html_colgroup_get_Span (edwinspireHtmlCOLGROUP* self);
void edwinspire_html_colgroup_set_Span (edwinspireHtmlCOLGROUP* self, const gchar* value);
GType edwinspire_html_col_get_type (void) G_GNUC_CONST;
edwinspireHtmlCOL* edwinspire_html_col_new (void);
edwinspireHtmlCOL* edwinspire_html_col_construct (GType object_type);
GType edwinspire_html_h1_get_type (void) G_GNUC_CONST;
edwinspireHtmlH1* edwinspire_html_h1_new (void);
edwinspireHtmlH1* edwinspire_html_h1_construct (GType object_type);
GType edwinspire_html_h2_get_type (void) G_GNUC_CONST;
edwinspireHtmlH2* edwinspire_html_h2_new (void);
edwinspireHtmlH2* edwinspire_html_h2_construct (GType object_type);
GType edwinspire_html_h3_get_type (void) G_GNUC_CONST;
edwinspireHtmlH3* edwinspire_html_h3_new (void);
edwinspireHtmlH3* edwinspire_html_h3_construct (GType object_type);
GType edwinspire_html_h4_get_type (void) G_GNUC_CONST;
edwinspireHtmlH4* edwinspire_html_h4_new (void);
edwinspireHtmlH4* edwinspire_html_h4_construct (GType object_type);
GType edwinspire_html_h5_get_type (void) G_GNUC_CONST;
edwinspireHtmlH5* edwinspire_html_h5_new (void);
edwinspireHtmlH5* edwinspire_html_h5_construct (GType object_type);
GType edwinspire_html_h6_get_type (void) G_GNUC_CONST;
edwinspireHtmlH6* edwinspire_html_h6_new (void);
edwinspireHtmlH6* edwinspire_html_h6_construct (GType object_type);
GType edwinspire_html_img_get_type (void) G_GNUC_CONST;
edwinspireHtmlIMG* edwinspire_html_img_new (void);
edwinspireHtmlIMG* edwinspire_html_img_construct (GType object_type);
const gchar* edwinspire_html_img_get_Alt (edwinspireHtmlIMG* self);
void edwinspire_html_img_set_Alt (edwinspireHtmlIMG* self, const gchar* value);
const gchar* edwinspire_html_img_get_Src (edwinspireHtmlIMG* self);
void edwinspire_html_img_set_Src (edwinspireHtmlIMG* self, const gchar* value);
const gchar* edwinspire_html_img_get_CrossOrigin (edwinspireHtmlIMG* self);
void edwinspire_html_img_set_CrossOrigin (edwinspireHtmlIMG* self, const gchar* value);
const gchar* edwinspire_html_img_get_UseMap (edwinspireHtmlIMG* self);
void edwinspire_html_img_set_UseMap (edwinspireHtmlIMG* self, const gchar* value);
gboolean edwinspire_html_img_get_IsMap (edwinspireHtmlIMG* self);
void edwinspire_html_img_set_IsMap (edwinspireHtmlIMG* self, gboolean value);
gint edwinspire_html_img_get_Width (edwinspireHtmlIMG* self);
void edwinspire_html_img_set_Width (edwinspireHtmlIMG* self, gint value);
gint edwinspire_html_img_get_Heigth (edwinspireHtmlIMG* self);
void edwinspire_html_img_set_Heigth (edwinspireHtmlIMG* self, gint value);
GType edwinspire_html_head_get_type (void) G_GNUC_CONST;
edwinspireHtmlHEAD* edwinspire_html_head_new (void);
edwinspireHtmlHEAD* edwinspire_html_head_construct (GType object_type);
void edwinspire_html_head_addElement (edwinspireHtmlHEAD* self, edwinspireHtmlElement* e);
void edwinspire_html_head_addElementText (edwinspireHtmlHEAD* self, const gchar* text);
GType edwinspire_html_span_get_type (void) G_GNUC_CONST;
edwinspireHtmlSPAN* edwinspire_html_span_new (void);
edwinspireHtmlSPAN* edwinspire_html_span_construct (GType object_type);
edwinspireHtmlCAPTION* edwinspire_html_caption_new (void);
edwinspireHtmlCAPTION* edwinspire_html_caption_construct (GType object_type);
GType edwinspire_html_ol_get_type (void) G_GNUC_CONST;
edwinspireHtmlOL* edwinspire_html_ol_new (void);
edwinspireHtmlOL* edwinspire_html_ol_construct (GType object_type);
edwinspireHtmlOL* edwinspire_html_ol_new_with_args (gboolean rev, gint s, const gchar* t);
edwinspireHtmlOL* edwinspire_html_ol_construct_with_args (GType object_type, gboolean rev, gint s, const gchar* t);
gboolean edwinspire_html_ol_get_Reversed (edwinspireHtmlOL* self);
void edwinspire_html_ol_set_Reversed (edwinspireHtmlOL* self, gboolean value);
gint edwinspire_html_ol_get_Start (edwinspireHtmlOL* self);
void edwinspire_html_ol_set_Start (edwinspireHtmlOL* self, gint value);
const gchar* edwinspire_html_ol_get_Type (edwinspireHtmlOL* self);
void edwinspire_html_ol_set_Type (edwinspireHtmlOL* self, const gchar* value);
GType edwinspire_html_body_get_type (void) G_GNUC_CONST;
edwinspireHtmlBODY* edwinspire_html_body_new (void);
edwinspireHtmlBODY* edwinspire_html_body_construct (GType object_type);
const gchar* edwinspire_html_body_get_OnAfterPrint (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnAfterPrint (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnBeforePrint (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnBeforePrint (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnBeforeUnLoad (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnBeforeUnLoad (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnHashChange (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnHashChange (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnMessage (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnMessage (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnOffLine (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnOffLine (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnLine (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnLine (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnPageHide (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnPageHide (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnPageShow (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnPageShow (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnPopState (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnPopState (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnResize (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnResize (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnStorage (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnStorage (edwinspireHtmlBODY* self, const gchar* value);
const gchar* edwinspire_html_body_get_OnUnLoad (edwinspireHtmlBODY* self);
void edwinspire_html_body_set_OnUnLoad (edwinspireHtmlBODY* self, const gchar* value);
GType edwinspire_html_ul_get_type (void) G_GNUC_CONST;
edwinspireHtmlUL* edwinspire_html_ul_new (void);
edwinspireHtmlUL* edwinspire_html_ul_construct (GType object_type);
GType edwinspire_html_li_get_type (void) G_GNUC_CONST;
edwinspireHtmlLI* edwinspire_html_li_new (void);
edwinspireHtmlLI* edwinspire_html_li_construct (GType object_type);
gint edwinspire_html_li_get_Value (edwinspireHtmlLI* self);
void edwinspire_html_li_set_Value (edwinspireHtmlLI* self, gint value);
GType edwinspire_html_html_get_type (void) G_GNUC_CONST;
edwinspireHtmlHTML* edwinspire_html_html_new (void);
edwinspireHtmlHTML* edwinspire_html_html_construct (GType object_type);
gboolean edwinspire_html_html_addElement (edwinspireHtmlHTML* self, edwinspireHtmlElement* e);
const gchar* edwinspire_html_html_get_Manifest (edwinspireHtmlHTML* self);
void edwinspire_html_html_set_Manifest (edwinspireHtmlHTML* self, const gchar* value);
GType edwinspire_html_attr_drop_zone_get_type (void) G_GNUC_CONST;
GType edwinspire_html_attr_state_get_type (void) G_GNUC_CONST;
edwinspireHtmlElement* edwinspire_html_element_new (void);
edwinspireHtmlElement* edwinspire_html_element_construct (GType object_type);
void edwinspire_html_element_addClass (edwinspireHtmlElement* self, const gchar* ClassNew);
void edwinspire_html_element_removeClass (edwinspireHtmlElement* self, const gchar* ClassToRemove);
void edwinspire_html_element_ClearAttrs (edwinspireHtmlElement* self);
void edwinspire_html_element_ClearClass (edwinspireHtmlElement* self);
void edwinspire_html_element_addOnChange (edwinspireHtmlElement* self, const gchar* fun);
void edwinspire_html_element_removeOnChange (edwinspireHtmlElement* self, const gchar* fun);
void edwinspire_html_element_ClearOnChange (edwinspireHtmlElement* self);
void edwinspire_html_element_addOnFocus (edwinspireHtmlElement* self, const gchar* fun);
void edwinspire_html_element_removeOnFocus (edwinspireHtmlElement* self, const gchar* fun);
void edwinspire_html_element_ClearOnFocus (edwinspireHtmlElement* self);
void edwinspire_html_element_AutoId (edwinspireHtmlElement* self);
void edwinspire_html_element_PropertyChanged (edwinspireHtmlElement* self, GParamSpec* p);
gchar* edwinspire_html_element_NameProp (const gchar* nameprop);
void edwinspire_html_element_addElement (edwinspireHtmlElement* self, edwinspireHtmlElement* Childe);
void edwinspire_html_element_addElementText (edwinspireHtmlElement* self, const gchar* Text);
void edwinspire_html_element_ClearElements (edwinspireHtmlElement* self);
gboolean edwinspire_html_element_RemoveAttr (edwinspireHtmlElement* self, const gchar* Attr);
void edwinspire_html_element_addCustomAttr (edwinspireHtmlElement* self, const gchar* Name, const gchar* Value);
gboolean edwinspire_html_element_RemoveCustomAttr (edwinspireHtmlElement* self, const gchar* Name);
gchar* edwinspire_html_element_CodeHtml (edwinspireHtmlElement* self);
gchar* edwinspire_html_element_TypeDataFieldToString (edwinspireHtmlTypeDataField tdf);
const gchar* edwinspire_html_element_get_AccessKey (edwinspireHtmlElement* self);
void edwinspire_html_element_set_AccessKey (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_ContentEditable (edwinspireHtmlElement* self);
void edwinspire_html_element_set_ContentEditable (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_ContextMenu (edwinspireHtmlElement* self);
void edwinspire_html_element_set_ContextMenu (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_Class (edwinspireHtmlElement* self);
void edwinspire_html_element_set_Class (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_Id (edwinspireHtmlElement* self);
void edwinspire_html_element_set_Id (edwinspireHtmlElement* self, const gchar* value);
edwinspireHtmlAttrDir edwinspire_html_element_get_Dir (edwinspireHtmlElement* self);
void edwinspire_html_element_set_Dir (edwinspireHtmlElement* self, edwinspireHtmlAttrDir value);
gboolean edwinspire_html_element_get_Draggable (edwinspireHtmlElement* self);
void edwinspire_html_element_set_Draggable (edwinspireHtmlElement* self, gboolean value);
edwinspireHtmlAttrDropZone edwinspire_html_element_get_DropZone (edwinspireHtmlElement* self);
void edwinspire_html_element_set_DropZone (edwinspireHtmlElement* self, edwinspireHtmlAttrDropZone value);
gboolean edwinspire_html_element_get_Hidden (edwinspireHtmlElement* self);
void edwinspire_html_element_set_Hidden (edwinspireHtmlElement* self, gboolean value);
const gchar* edwinspire_html_element_get_Lang (edwinspireHtmlElement* self);
void edwinspire_html_element_set_Lang (edwinspireHtmlElement* self, const gchar* value);
gboolean edwinspire_html_element_get_SpellCheck (edwinspireHtmlElement* self);
void edwinspire_html_element_set_SpellCheck (edwinspireHtmlElement* self, gboolean value);
gint edwinspire_html_element_get_TabIndex (edwinspireHtmlElement* self);
void edwinspire_html_element_set_TabIndex (edwinspireHtmlElement* self, gint value);
gboolean edwinspire_html_element_get_Translate (edwinspireHtmlElement* self);
void edwinspire_html_element_set_Translate (edwinspireHtmlElement* self, gboolean value);
const gchar* edwinspire_html_element_get_OnAbort (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnAbort (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnBlur (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnBlur (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnCanPlay (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnCanPlay (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnCanPlayThrough (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnCanPlayThrough (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnChange (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnChange (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnClick (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnClick (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnDblClick (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnDblClick (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnKeyDown (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnKeyDown (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnKeyPress (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnKeyPress (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnKeyUp (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnKeyUp (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnMouseDown (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnMouseDown (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnMouseMove (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnMouseMove (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnMouseOut (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnMouseOut (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnMouseOver (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnMouseOver (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnMouseUp (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnMouseUp (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnContextMenu (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnContextMenu (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnCueChange (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnCueChange (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnDrag (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnDrag (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnDragEnd (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnDragEnd (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnDragEnter (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnDragEnter (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnDragLeave (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnDragLeave (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnDragOver (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnDragOver (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnDragStart (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnDragStart (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnDrop (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnDrop (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnDurationChange (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnDurationChange (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnEmptied (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnEmptied (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnEnded (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnEnded (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnError (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnError (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnFocus (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnFocus (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnInput (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnInput (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnInvalid (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnInvalid (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnLoad (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnLoad (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnLoadedData (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnLoadedData (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnLoadedMetaData (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnLoadedMetaData (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnLoadStart (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnLoadStart (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnMouseWheel (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnMouseWheel (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnPause (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnPause (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnPlay (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnPlay (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnPlaying (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnPlaying (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnProgress (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnProgress (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnRateChange (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnRateChange (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnReset (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnReset (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnScroll (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnScroll (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnSeeked (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnSeeked (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnSeeking (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnSeeking (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnSelect (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnSelect (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnShow (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnShow (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnStalled (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnStalled (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnSubmit (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnSubmit (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnSuspend (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnSuspend (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnTimeUpdate (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnTimeUpdate (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnVolumeChange (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnVolumeChange (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_OnWaiting (edwinspireHtmlElement* self);
void edwinspire_html_element_set_OnWaiting (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_Style (edwinspireHtmlElement* self);
void edwinspire_html_element_set_Style (edwinspireHtmlElement* self, const gchar* value);
const gchar* edwinspire_html_element_get_Title (edwinspireHtmlElement* self);
void edwinspire_html_element_set_Title (edwinspireHtmlElement* self, const gchar* value);
gint edwinspire_html_element_get_ChildCount (edwinspireHtmlElement* self);
const gchar* edwinspire_html_element_get_Checksum (edwinspireHtmlElement* self);


G_END_DECLS

#endif
