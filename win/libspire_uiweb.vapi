/* libspire_uiweb.vapi generated by valac.exe 0.12.0, do not modify. */

[CCode (cprefix = "edwinspire", lower_case_cprefix = "edwinspire_")]
namespace edwinspire {
	[CCode (cprefix = "edwinspireUiWeb", lower_case_cprefix = "edwinspire_ui_web_")]
	namespace UiWeb {
		[CCode (cprefix = "edwinspireUiWebInterfaceConf", lower_case_cprefix = "edwinspire_ui_web_interface_conf_")]
		namespace InterfaceConf {
			[CCode (cprefix = "edwinspireUiWebInterfaceConfdb", lower_case_cprefix = "edwinspire_ui_web_interface_conf_db_")]
			namespace db {
				[CCode (cheader_filename = "libspire_uiweb.h")]
				[Description (blurb = "Data from conf table", nick = "UI web Configure")]
				public class ConfigData : GLib.Object {
					public bool Enable;
					public string HomePage;
					public int Id;
					public string Note;
					public uint16 Port;
					public string Root;
					public ConfigData ();
					public ConfigData.from_string (string? id, string? rootpath, string? homepage, string port, string? enable, string? note);
					public ConfigData.with_args (int? id, string rootpath, string homepage, uint16 port, bool enable, string? note);
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				[Description (blurb = "Data from conf table", nick = "UI web Configure")]
				public class TableConfig : GLib.Object {
					public const string FILECONF;
					public TableConfig ();
					public static Gee.ArrayList<edwinspire.UiWeb.InterfaceConf.db.ConfigData> All ();
					public bool AuthAdmin (string user, string password);
					public static bool Delete (int id);
					public static bool Insert (edwinspire.UiWeb.InterfaceConf.db.ConfigData conf);
					public static edwinspire.UiWeb.InterfaceConf.db.ConfigData Last ();
					public static edwinspire.UiWeb.InterfaceConf.db.ConfigData RowById (int id);
					public static bool Update (edwinspire.UiWeb.InterfaceConf.db.ConfigData conf);
				}
			}
			[CCode (cprefix = "edwinspireUiWebInterfaceConfui", lower_case_cprefix = "edwinspire_ui_web_interface_conf_ui_")]
			namespace ui {
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class ComponentTableConfigure : edwinspire.UiWeb.ui.Components.Tables.Ajax.AjaxTable, edwinspire.UiWeb.ui.Components.Tables.Ajax.ITableResponse {
					public ComponentTableConfigure ();
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				[Description (blurb = "Master configure web page", nick = "Master Page")]
				public class Home : edwinspire.UiWeb.ui.Components.Window, edwinspire.UiWeb.ui.Components.IValaCompiledPage {
					public Home ();
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				[Description (blurb = "", nick = "Uiweb page Admin Table")]
				public class TableAdmin : edwinspire.UiWeb.ui.Components.Basic, edwinspire.UiWeb.ui.Components.IValaCompiledPage {
					public edwinspire.UiWeb.ui.Components.Tables.Ajax.AjaxTable Table;
					public TableAdmin ();
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				[Description (blurb = "", nick = "Uiweb page Configure Table")]
				public class TableConfigure : edwinspire.UiWeb.ui.Components.Basic, edwinspire.UiWeb.ui.Components.IValaCompiledPage {
					public edwinspire.UiWeb.InterfaceConf.ui.ComponentTableConfigure Table;
					public TableConfigure ();
				}
			}
		}
		[CCode (cprefix = "edwinspireUiWebServer", lower_case_cprefix = "edwinspire_ui_web_server_")]
		[Description (blurb = "Libreria que permite crear una interface grafica via web para aplicaciones", nick = "UiWebServer")]
		namespace Server {
			[CCode (cheader_filename = "libspire_uiweb.h")]
			[Description (blurb = "Servidor web Http embebido", nick = "Servidor Web Embebido")]
			public class uiServer : GLib.Object {
				public uiServer ();
				public void Start ();
				public void Start_without_mainloop ();
				public void addValaCompiledPage (edwinspire.UiWeb.ui.Components.IValaCompiledPage vcp);
				public void serve_response (edwinspire.uHttp.Response response, GLib.DataOutputStream dos);
				public Gee.HashMap<string,string> VirtualUrl { get; set; }
				public signal void RequestVCPage (edwinspire.uHttp.Request request, GLib.DataOutputStream dos, GLib.Type typeClass);
				public signal void RequestVirtual (edwinspire.uHttp.Request request, GLib.DataOutputStream dos);
			}
			[CCode (cheader_filename = "libspire_uiweb.h")]
			public const string VERSION;
		}
		[CCode (cprefix = "edwinspireUiWebui", lower_case_cprefix = "edwinspire_ui_web_ui_")]
		namespace ui {
			[CCode (cprefix = "edwinspireUiWebuiComponents", lower_case_cprefix = "edwinspire_ui_web_ui_components_")]
			namespace Components {
				[CCode (cprefix = "edwinspireUiWebuiComponentsTables", lower_case_cprefix = "edwinspire_ui_web_ui_components_tables_")]
				namespace Tables {
					[CCode (cprefix = "edwinspireUiWebuiComponentsTablesAjax", lower_case_cprefix = "edwinspire_ui_web_ui_components_tables_ajax_")]
					namespace Ajax {
						[CCode (cheader_filename = "libspire_uiweb.h")]
						[Description (blurb = "Tabla de datos con comunicacion ajax xml", nick = "Ajax Data Table")]
						public class AjaxTable : GLib.Object, edwinspire.UiWeb.ui.Components.IComponent, edwinspire.UiWeb.ui.Components.IValaCompiledPage {
							public bool AutoRequestLoadOnLoad;
							public Gee.ArrayList<edwinspire.UiWeb.ui.Components.Tables.Column> Columns;
							protected string InternalUrlVirtual;
							public string JsScript;
							public string OnHeadContextMenu;
							public string OnRowContextMenu;
							public string Title;
							public AjaxTable ();
							public edwinspire.Html.TR DefaultRow ();
							public edwinspire.Html.TH HeadMenuRow ();
							public string JsFunctionActionRow (edwinspire.UiWeb.ui.Components.Tables.Ajax.RequestAction requestaction = RequestAction.None, string row);
							public string JsFunctionHideBody ();
							public string JsFunctionRequestCreateRow (string row = "{}");
							public string JsFunctionRequestLoad (string jsfilter = "{}");
							public string JsFunctionRequestNewRow ();
							public string JsFunctionShowBody ();
							public edwinspire.Html.TD MenuRow ();
							public void addColumn (edwinspire.Html.Element LabelHead, edwinspire.UiWeb.ui.Widgets.IDataElement ColElementDefault, bool Visible = true, bool Resizable = false);
							public void addColumnFromEnum (string Label, string Name, GLib.Type enumtype, string Id = "", bool Disabled = false, string value = "", bool Visible = true);
							public void addColumnFromInputType (string Label, string Name, edwinspire.Html.TypeDataField Type, string Id = "", bool required = false, bool ReadOnly = false, string placeholder = "", string value = "", int Size = 0, bool Visible = true);
							public void addColumnFromTextArea (string Label, string Name, string Id = "", bool required = false, bool Disabled = false, bool ReadOnly = false, string placeholder = "", string value = "", uint cols = 15, uint rows = 1, bool Visible = true, bool Resizable = true);
							public void addColumnTxtHead (string Label, edwinspire.UiWeb.ui.Widgets.IDataElement ColElementDefault, bool Visible = true, bool Resizable = false);
							public string JSObject { get; }
						}
						[CCode (cheader_filename = "libspire_uiweb.h")]
						public interface ITableResponse : GLib.Object {
							public void AddRowToBufferRows (Gee.ArrayList<edwinspire.UiWeb.ui.Components.Tables.Column> ColumnDefine, Gee.HashMap<string,string> row_key_value);
							public void ClearBufferRows ();
							public static edwinspire.uHttp.Response NotImplementedResponse ();
							public edwinspire.uHttp.Response RequestToAction (edwinspire.uHttp.Request request, Gee.HashMap<string,string> @params = new Gee.HashMap<string,string> (null, null, null));
							public abstract edwinspire.uHttp.Response ResponseToAction (edwinspire.UiWeb.ui.Components.Tables.Ajax.RequestAction action, edwinspire.uHttp.Request request, Gee.HashMap<string,string> @params);
							public string xmlResponse (bool sendbufferrows = true, bool clearbuffer = true, edwinspire.UiWeb.ui.Components.Tables.Ajax.ResponseAction response_action = ResponseAction.None);
							public string xmlResponseLoad (bool sendbufferrows = true, bool clearbuffer = true);
							public string xmlResponseRowCreated (bool sendnewrow = true, bool clearbuffer = true);
							public string xmlResponseRowUpdated (bool sendlastbufferrow = true, bool clearbuffer = true);
							public abstract Gee.ArrayList<Gee.HashMap<string,string>> BufferRowsInternal { get; set; }
							public signal void RequestCopyRow (edwinspire.uHttp.Request request);
							public signal void RequestCreateRow (edwinspire.uHttp.Request request);
							public signal void RequestDeleteAllRow (edwinspire.uHttp.Request request);
							public signal void RequestDeleteRow (edwinspire.uHttp.Request request);
							public signal void RequestInsertRow (edwinspire.uHttp.Request request);
							public signal void RequestLoad (edwinspire.uHttp.Request request);
							public signal void RequestNone (edwinspire.uHttp.Request request);
							public signal void RequestUpdateRow (edwinspire.uHttp.Request request);
						}
						[CCode (cprefix = "EDWINSPIRE_UI_WEB_UI_COMPONENTS_TABLES_AJAX_REQUEST_ACTION_", cheader_filename = "libspire_uiweb.h")]
						public enum RequestAction {
							None,
							Load,
							CreateRow,
							UpdateRow,
							CopyRow,
							InsertRow,
							DeleteRow,
							DeleteAllRow
						}
						[CCode (cprefix = "EDWINSPIRE_UI_WEB_UI_COMPONENTS_TABLES_AJAX_RESPONSE_ACTION_", cheader_filename = "libspire_uiweb.h")]
						public enum ResponseAction {
							None,
							Load,
							CreatedRow,
							UpdatedRow,
							CopiedRow,
							InsertedRow,
							DeletedRow,
							DeletedAllRow
						}
					}
					[CCode (cprefix = "edwinspireUiWebuiComponentsTablesData", lower_case_cprefix = "edwinspire_ui_web_ui_components_tables_data_")]
					namespace Data {
						[CCode (cheader_filename = "libspire_uiweb.h")]
						[Description (blurb = "Data Table for datas", nick = "Data Table Widget")]
						public class DataTable : GLib.Object, edwinspire.UiWeb.ui.Components.IComponent {
							public bool AutoConnectAjax;
							public edwinspire.Html.CAPTION Caption;
							public string JsScript;
							public string OnCellChanged;
							public string OnDataLoadTable;
							public string OnEmty;
							public string OnFailDataLoadTable;
							public string OnFailServerRowDeleted;
							public string OnFailServerRowUpdated;
							public string OnHeadContextMenu;
							public string OnInvalidDataCell;
							public string OnNewRow;
							public string OnRowContextMenu;
							public string OnServerRowDeleted;
							public string OnServerRowUpdated;
							public string OnUndoCell;
							public string UrlAction;
							public DataTable ();
							public void AddRowToSend (string none = "row", ...);
							public edwinspire.Html.TR DefaultRow ();
							public string JsFunctionActionRow (string row, string action);
							public string JsFunctionHideBody ();
							public string JsFunctionInsertRow (string row);
							public string JsFunctionInsertRows (string rows);
							public string JsFunctionLoad (string jsfilter = "{}");
							public string JsFunctionNewRow ();
							public string JsFunctionRowTriggerContextMenu ();
							public string JsFunctionShowBody ();
							public string Response (string status = "unknow", string action = "none", string messagedialog = "");
							public string SendRows (string status = "ok", string action = "none", string messagedialog = "");
							public static string XmlDocToString (Xml.Doc* document);
							public void addColumn (edwinspire.Html.Element LabelHead, edwinspire.UiWeb.ui.Widgets.IDataElement ColElementDefault);
							public void addColumnFromInputType (string Label, string Name, edwinspire.Html.TypeDataField Type, string Id = "", bool required = false, bool ReadOnly = false, string placeholder = "", string value = "");
							public void addColumnTxtHead (string Label, edwinspire.UiWeb.ui.Widgets.IDataElement ColElementDefault);
							public string IdTBody { get; }
							public string IdTRLabel { get; }
							public string IdTable { get; }
							public string JSObject { get; }
						}
					}
					[CCode (cheader_filename = "libspire_uiweb.h")]
					public class Column : GLib.Object {
						public edwinspire.UiWeb.ui.Widgets.IDataElement Cell;
						public edwinspire.Html.Element HeadElement;
						public bool Resizable;
						public bool Visible;
						public Column (edwinspire.Html.Element HeadLabel, edwinspire.UiWeb.ui.Widgets.IDataElement cell, bool visible = true, bool resizable = false);
					}
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class Basic : GLib.Object, edwinspire.UiWeb.ui.Components.IComponent, edwinspire.UiWeb.ui.Components.IHtmlPage {
					public Basic ();
					public void PropertyChanged (GLib.ParamSpec p);
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class ContextualMenu : GLib.Object, edwinspire.UiWeb.ui.Components.IComponent {
					public Gee.HashSet<string> FuncionsJs;
					public string NombreObjeto;
					public string Property;
					public ContextualMenu ();
					public string JsFunctionAddItem (string label, string jsfunctiononclick);
					public string JsFunctionHide ();
					public string JsFunctionShow (string x = "0", string y = "0");
					public string JsScriptMenu ();
					public void addItem (string Label, string JScriptOnClick);
					public string IdDiv { get; }
					public string IdUL { get; }
					public string JSObject { get; }
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class DockMenu : GLib.Object, edwinspire.UiWeb.ui.Components.IComponent {
					public DockMenu ();
					public void addItem (string Label, string Img = "images/null.png", string href = "#", string ImgAlt = "");
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class LddmMenu : GLib.Object, edwinspire.UiWeb.ui.Components.IComponent {
					public edwinspire.Html.UL Container;
					public LddmMenu ();
					public void addGroupToSubMenu (string namesubm, string NameGroup);
					public void addItemToGroup (string namesubm, string NameGroup, edwinspire.Html.LI element);
					public void addSimpleLink (string namesubm, string NameGroup, string Label, string href = "#");
					public void addSimpleLinkWithImg (string namesubm, string NameGroup, string Label, string href = "#", string srcimg, string atlimg, int width = 25, int heigth = 25);
					public void addSubMenu (string namesubm = "Submenu", string Labelsubfoot = "", string hrefsubfoot = "#");
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class Window : GLib.Object {
					public Window ();
					public string HtmlCode ();
					public void addComponent (edwinspire.UiWeb.ui.Components.IComponent component);
					public void addDockIcon (string Label, string Img = "images/null.png", string href = "#", string ImgAlt = "", bool oncontainer = true);
					public void addGroupToSubMenu (string namesubm, string NameGroup);
					public void addItemToGroup (string namesubm, string NameGroup, edwinspire.Html.LI element);
					public void addSimpleLink (string namesubm, string NameGroup, string Label, string href = "#", bool oncontainer = true);
					public void addSimpleLinkWithImg (string namesubm, string NameGroup, string Label, string href = "#", string srcimg, string atlimg, int width = 25, int heigth = 25, bool oncontainer = true);
					public void addSubMenu (string namesubm = "Submenu", string Labelsubfoot = "", string hrefsubfoot = "#", bool oncontainer = true);
					public edwinspire.UiWeb.ui.ThemeUi Theme { get; set; }
					public string Title { get; set; }
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public interface IComponent : GLib.Object {
					public edwinspire.Html.BODY BodyHtml ();
					public void Clear ();
					public void ClearBody ();
					public void ClearHead ();
					public edwinspire.Html.HEAD HeadHtml ();
					public string IdComponent ();
					public void addComponent (edwinspire.UiWeb.ui.Components.IComponent component);
					public void addListToBody (Gee.ArrayList<edwinspire.Html.Element> elements);
					public void addListToHead (Gee.ArrayList<edwinspire.UiWeb.ui.ElementHead> elements);
					public void addToBody (edwinspire.Html.Element element);
					public void addToHead (edwinspire.UiWeb.ui.ElementHead element);
					public Gee.ArrayList<edwinspire.Html.Element> ElementsToBody { get; }
					public Gee.ArrayList<edwinspire.UiWeb.ui.ElementHead> ElementsToHead { get; }
					public abstract edwinspire.UiWeb.ui.ThemeUi Theme { get; set; }
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public interface IHtmlPage : GLib.Object {
					public abstract void BuildHtml ();
					public string HtmlCode ();
					public string Signature ();
					public abstract string Title { get; set; }
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				[Description (blurb = "Interface de la cual deben derivar todas las clases que sean paginas compiladas", nick = "IValaCompiledPage")]
				public interface IValaCompiledPage : GLib.Object {
					protected string AutoUrl (bool encoded = false);
					public string NameClass ();
					public abstract string VirtualUrl { get; }
				}
			}
			[CCode (cprefix = "edwinspireUiWebuiWidgets", lower_case_cprefix = "edwinspire_ui_web_ui_widgets_")]
			namespace Widgets {
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class ComboBox : edwinspire.Html.SELECT, edwinspire.UiWeb.ui.Widgets.IDataElement {
					public ComboBox ();
					public ComboBox.FromEnum (GLib.Type typeenum);
					public void addOption (string Label, string ValueOp = "", bool Selected = false);
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class ComboBoxGroup : edwinspire.UiWeb.ui.Widgets.ComboBox {
					public ComboBoxGroup ();
					public void Reset ();
					public void addGroup (string LabelGroup, bool Disabled = false);
					public new void addOption (string LabelGroup, string Label, string Value = "");
					public GLib.Value Value { get; set; }
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class Input : edwinspire.Html.SPAN, edwinspire.UiWeb.ui.Widgets.IDataElement {
					public edwinspire.Html.INPUT InputHtml;
					public Input ();
					public bool ValidityField ();
					public string Id { get; set; }
					public edwinspire.Html.TypeDataField Type { get; set; }
					public GLib.Type TypeOf { get; }
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class TextArea : edwinspire.Html.TEXTAREA, edwinspire.UiWeb.ui.Widgets.IDataElement {
					public TextArea ();
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public interface IDataElement : edwinspire.Html.Element {
					public static bool ValueToBool (GLib.Value v);
					public static string ValueToString (GLib.Value v);
					public abstract string Name { get; set; }
					public abstract GLib.Value Value { get; set; }
				}
			}
			[CCode (cprefix = "edwinspireUiWebuijQueryUI", lower_case_cprefix = "edwinspire_ui_web_ui_jquery_ui_")]
			namespace jQueryUI {
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class AutoComplete : GLib.Object {
					public string OnChange;
					public string OnFocus;
					public string OnSelect;
					public string appendTo;
					public bool autoFocus;
					public int delay;
					public bool disabled;
					public int minLength;
					public string position;
					public string source;
					public AutoComplete (string id);
					public string JavaScriptCode ();
				}
				[CCode (cheader_filename = "libspire_uiweb.h")]
				public class Dialog : GLib.Object {
					public Gee.HashMap<string,string> Buttons;
					public edwinspire.Html.Element Content;
					public bool autoOpen;
					public bool closeOnEscape;
					public string closeText;
					public string dialogClass;
					public bool disabled;
					public bool draggable;
					public int height;
					public edwinspire.UiWeb.ui.jQueryUI.EffectAnimate hide;
					public int maxHeight;
					public int maxWidth;
					public int minHeight;
					public int minWidth;
					public bool modal;
					public string position;
					public bool resizable;
					public edwinspire.UiWeb.ui.jQueryUI.EffectAnimate show;
					public bool stack;
					public string title;
					public int width;
					public int zIndex;
					public Dialog ();
					public void BindEventCreate (string callback_function);
					public static string EffectAnimateToString (edwinspire.UiWeb.ui.jQueryUI.EffectAnimate effanim);
					public string JavaScriptCode ();
					public void addButton (string label, string callback_function);
					public void addEventCreate (string callback_function);
					public string close (bool internalcallback = true);
					public string Id { get; }
				}
				[CCode (cprefix = "EDWINSPIRE_UI_WEB_UI_JQUERY_UI_EFFECT_ANIMATE_", cheader_filename = "libspire_uiweb.h")]
				public enum EffectAnimate {
					None,
					Blind,
					Bounce,
					Clip,
					Drop,
					Explode,
					Fold,
					Highlight,
					Puff,
					Pulsate,
					Scale,
					Shake,
					Size,
					Slide
				}
			}
			[CCode (cheader_filename = "libspire_uiweb.h")]
			public class ElementHead : GLib.Object {
				public edwinspire.Html.Element Element;
				public int Level;
				public ElementHead (int level = 0, edwinspire.Html.Element element = new edwinspire.Html.TITLE (""));
			}
			[CCode (cheader_filename = "libspire_uiweb.h")]
			public class HEADERS : GLib.Object {
				public HEADERS ();
				public static edwinspire.Html.SCRIPT BASE64 ();
				public static edwinspire.Html.LINK CSS (string path);
				public static edwinspire.UiWeb.ui.ElementHead EH_BASE64 ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_BLACKTIE ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_BLITZER ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_CUPERTINO ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_DARKHIVE ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_DARKNESS ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_DEFAULT ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_EGGPLANT ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_FLICK ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_HOTSNEAKS ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_HUMANITY ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_LEFROG ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_LIGHTNESS ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_OVERCAST ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_PEPPERGRINDER ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_REDMON ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_SMOOTHNESS ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_SOUTHSTREET ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_START ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JQUERY_UI_CSS_SUNNY ();
				public static edwinspire.UiWeb.ui.ElementHead EH_JSSCRIPT_CODE (string code, int level = 0);
				public static edwinspire.UiWeb.ui.ElementHead EH_JSSCRIPT_PATH (string path, int level = 0);
				public static edwinspire.UiWeb.ui.ElementHead EH_RESET_CSS ();
				public static edwinspire.UiWeb.ui.ElementHead EH_WINBASE ();
				public static edwinspire.Html.SCRIPT JQUERY ();
				public static edwinspire.Html.SCRIPT JQUERY_DIALOG_OFFLINE ();
				public static edwinspire.Html.SCRIPT JQUERY_UI ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_BLACKTIE ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_BLITZER ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_CUPERTINO ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_DARKHIVE ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_DARKNESS ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_DEFAULT ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_EGGPLANT ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_FLICK ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_HOTSNEAKS ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_HUMANITY ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_LEFROG ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_LIGHTNESS ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_OVERCAST ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_PEPPERGRINDER ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_REDMON ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_SMOOTHNESS ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_SOUTHSTREET ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_START ();
				public static edwinspire.Html.LINK JQUERY_UI_CSS_SUNNY ();
				public static edwinspire.Html.SCRIPT JSSCRIPT_CODE (string code);
				public static edwinspire.Html.SCRIPT JSSCRIPT_PATH (string Path);
				public static edwinspire.Html.LINK RESET_CSS ();
				public static edwinspire.UiWeb.ui.ElementHead ThemeHeadFromEnum (edwinspire.UiWeb.ui.ThemeUi theme);
				public static edwinspire.Html.SCRIPT WINBASE ();
			}
			[CCode (cprefix = "EDWINSPIRE_UI_WEB_UI_THEME_UI_", cheader_filename = "libspire_uiweb.h")]
			public enum ThemeUi {
				DEFAULT,
				BLACKTIE,
				BLITZER,
				CUPERTINO,
				DARKHIVE,
				DARKNESS,
				SMOOTHNESS,
				EGGPLANT,
				FLICK,
				HOTSNEAKS,
				HUMANITY,
				LEFROG,
				OVERCAST,
				PEPPERGRINDER,
				REDMON,
				SOUTHSTREET,
				START,
				SUNNY,
				LIGHTNESS
			}
		}
	}
}
